[{"/Users/davidmash/Documents/portfolio/src/index.js":"1","/Users/davidmash/Documents/portfolio/src/reportWebVitals.js":"2","/Users/davidmash/Documents/portfolio/src/App.js":"3","/Users/davidmash/Documents/portfolio/src/Components/Footer.js":"4","/Users/davidmash/Documents/portfolio/src/Components/Header.js":"5","/Users/davidmash/Documents/portfolio/src/Components/About.js":"6","/Users/davidmash/Documents/portfolio/src/Components/Resume.js":"7","/Users/davidmash/Documents/portfolio/src/Components/Portfolio.js":"8","/Users/davidmash/Documents/portfolio/src/Components/Contact.js":"9","/Users/davidmash/Documents/portfolio/src/Components/AudioVisualizer.js":"10","/Users/davidmash/Documents/portfolio/src/Components/SlideIn.js":"11","/Users/davidmash/Documents/portfolio/src/Components/FadeIn.js":"12","/Users/davidmash/Documents/portfolio/src/Components/FollowCursor.js":"13","/Users/davidmash/Documents/davidmash.github.io/src/index.js":"14","/Users/davidmash/Documents/davidmash.github.io/src/reportWebVitals.js":"15","/Users/davidmash/Documents/davidmash.github.io/src/App.js":"16","/Users/davidmash/Documents/davidmash.github.io/src/Components/Footer.js":"17","/Users/davidmash/Documents/davidmash.github.io/src/Components/Resume.js":"18","/Users/davidmash/Documents/davidmash.github.io/src/Components/Portfolio.js":"19","/Users/davidmash/Documents/davidmash.github.io/src/Components/About.js":"20","/Users/davidmash/Documents/davidmash.github.io/src/Components/Header.js":"21","/Users/davidmash/Documents/davidmash.github.io/src/Components/FollowCursor.js":"22","/Users/davidmash/Documents/davidmash.github.io/src/Components/Contact.js":"23","/Users/davidmash/Documents/davidmash.github.io/src/Components/FadeIn.js":"24","/Users/davidmash/Documents/davidmash.github.io/src/Components/SlideIn.js":"25","/Users/davidmash/Documents/davidmash.github.io/src/Components/AudioVisualizer.js":"26"},{"size":455,"mtime":1673935388057,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1619330359000,"results":"29","hashOfConfig":"28"},{"size":1473,"mtime":1674186087567,"results":"30","hashOfConfig":"28"},{"size":1031,"mtime":1674326861606,"results":"31","hashOfConfig":"28"},{"size":1921,"mtime":1674257781807,"results":"32","hashOfConfig":"28"},{"size":1715,"mtime":1674184905640,"results":"33","hashOfConfig":"28"},{"size":2881,"mtime":1674156460444,"results":"34","hashOfConfig":"28"},{"size":1321,"mtime":1674158599644,"results":"35","hashOfConfig":"28"},{"size":3367,"mtime":1674327625857,"results":"36","hashOfConfig":"28"},{"size":15745,"mtime":1674338489454,"results":"37","hashOfConfig":"28"},{"size":1852,"mtime":1674149911883,"results":"38","hashOfConfig":"28"},{"size":1299,"mtime":1674149288340,"results":"39","hashOfConfig":"28"},{"size":2783,"mtime":1674329526153,"results":"40","hashOfConfig":"28"},{"size":455,"mtime":1674345787572,"results":"41","hashOfConfig":"42"},{"size":362,"mtime":1674345787572,"results":"43","hashOfConfig":"42"},{"size":1473,"mtime":1674345787569,"results":"44","hashOfConfig":"42"},{"size":1031,"mtime":1674345787571,"results":"45","hashOfConfig":"42"},{"size":2881,"mtime":1674345787572,"results":"46","hashOfConfig":"42"},{"size":1321,"mtime":1674345787571,"results":"47","hashOfConfig":"42"},{"size":1715,"mtime":1674345787570,"results":"48","hashOfConfig":"42"},{"size":1921,"mtime":1674514326852,"results":"49","hashOfConfig":"42"},{"size":2783,"mtime":1674345787571,"results":"50","hashOfConfig":"42"},{"size":3367,"mtime":1674345787570,"results":"51","hashOfConfig":"42"},{"size":1299,"mtime":1674345787571,"results":"52","hashOfConfig":"42"},{"size":1852,"mtime":1674345787572,"results":"53","hashOfConfig":"42"},{"size":16288,"mtime":1674513477281,"results":"54","hashOfConfig":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"qg7qn2",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"a1p9we",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},"/Users/davidmash/Documents/portfolio/src/index.js",[],["110","111"],"/Users/davidmash/Documents/portfolio/src/reportWebVitals.js",[],"/Users/davidmash/Documents/portfolio/src/App.js",[],"/Users/davidmash/Documents/portfolio/src/Components/Footer.js",[],"/Users/davidmash/Documents/portfolio/src/Components/Header.js",[],"/Users/davidmash/Documents/portfolio/src/Components/About.js",[],"/Users/davidmash/Documents/portfolio/src/Components/Resume.js",[],"/Users/davidmash/Documents/portfolio/src/Components/Portfolio.js",[],"/Users/davidmash/Documents/portfolio/src/Components/Contact.js",[],"/Users/davidmash/Documents/portfolio/src/Components/AudioVisualizer.js",["112"],"/Users/davidmash/Documents/portfolio/src/Components/SlideIn.js",[],"/Users/davidmash/Documents/portfolio/src/Components/FadeIn.js",[],"/Users/davidmash/Documents/portfolio/src/Components/FollowCursor.js",[],"/Users/davidmash/Documents/davidmash.github.io/src/index.js",[],["113","114"],"/Users/davidmash/Documents/davidmash.github.io/src/reportWebVitals.js",[],"/Users/davidmash/Documents/davidmash.github.io/src/App.js",[],"/Users/davidmash/Documents/davidmash.github.io/src/Components/Footer.js",[],"/Users/davidmash/Documents/davidmash.github.io/src/Components/Resume.js",[],"/Users/davidmash/Documents/davidmash.github.io/src/Components/Portfolio.js",[],"/Users/davidmash/Documents/davidmash.github.io/src/Components/About.js",[],"/Users/davidmash/Documents/davidmash.github.io/src/Components/Header.js",[],"/Users/davidmash/Documents/davidmash.github.io/src/Components/FollowCursor.js",[],"/Users/davidmash/Documents/davidmash.github.io/src/Components/Contact.js",[],"/Users/davidmash/Documents/davidmash.github.io/src/Components/FadeIn.js",[],"/Users/davidmash/Documents/davidmash.github.io/src/Components/SlideIn.js",[],"/Users/davidmash/Documents/davidmash.github.io/src/Components/AudioVisualizer.js",["115","116"],"import React, { useRef, useState, useEffect } from 'react';\nimport VisibilitySensor from 'react-visibility-sensor';\n\nfunction AudioVisualizer(props) {\n    const [audioElement, setAudioElement] = useState(null);\n    const [analyser, setAnalyser] = useState(null);\n    const [audioCtx, setAudioCtx] = useState(null);\n    const [source, setSource] = useState(null);\n    const [loaded, setLoaded] = useState(false);\n    const canvasAreaRef = useRef(null);\n    const fileInputRef = useRef(null);\n    const frequencyRef = useRef(null);\n    const backgroundRef = useRef(null);\n    const scrubBarRef = useRef(null);\n    const [play, setPlay] = useState(false);\n    const [mouseOverBottom, setMouseOverBottom] = useState(false);\n    const [isVisible, setIsVisible] = useState(true);\n\n    useEffect(() => {\n        if (analyser && source && audioCtx) {\n            source.connect(analyser);\n            analyser.connect(audioCtx.destination);\n            togglePlay(true);\n\n            const bufferLength = analyser.frequencyBinCount;\n            let dataArray = new Uint8Array(bufferLength);\n\n            frequencyRef.current.willReadFrequently = true;\n            backgroundRef.current.willReadFrequently = true;\n            const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n            const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n            backgroundRef.current.style.width ='100%';\n            backgroundRef.current.style.height='100%';\n            frequencyRef.current.style.width ='100%';\n            frequencyRef.current.style.height='100%';\n            backgroundRef.current.width  = canvasAreaRef.current.offsetWidth;\n            backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n            frequencyRef.current.width  = canvasAreaRef.current.offsetWidth;\n            frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n\n            canvasAreaRef.current.addEventListener(\"resize\", () => {\n                backgroundRef.current.width  = canvasAreaRef.current.offsetWidth;\n                backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n                frequencyRef.current.width  = canvasAreaRef.current.offsetWidth;\n                frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n            });\n\n            let ultimatePeak = 1;\n            let rotationAngle = 0;\n            let rotateSmudge = false;\n            let smudgeVelocity = 0;\n\n            // Draw the frequency spectrum visualization\n            function drawVisualization() {\n                requestAnimationFrame(drawVisualization);\n                analyser.getByteFrequencyData(dataArray);\n                \n                // draw current frame to main canvas\n                frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvas.height);\n        \n                let avgAmplitude = 0;\n                let highFreqAvgAmplitude = 0;\n                let midFreqAvgAmplitude = 0;\n                let lowFreqAvgAmplitude = 0;\n                let lowFreqPeakAmplitude = 0;\n                if (dataArray && dataArray.length > 0) {\n                    let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n                    let highFrequencyColor = getHighFrequencyColor(dataArray);\n                    gradient.addColorStop(0, highFrequencyColor);\n                    gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n                    gradient.addColorStop(1, highFrequencyColor);\n                    frequencyCtx.fillStyle = gradient;\n                    let verticalCenter = frequencyCtx.canvas.height / 2;\n                    let zeroAdjust = 0;\n                    for (let i = dataArray.length - 1; i >= 0; i--) {\n                        if (dataArray[i] - 20 > 0) break;\n                        zeroAdjust++;\n                    }\n                    let barWidth = ((frequencyCtx.canvas.width / dataArray.length)) / 2;\n                    let x = 0;\n                    let x2 = frequencyCtx.canvas.width;\n                    for (let i = 0; i < dataArray.length - zeroAdjust; i++) {\n                        drawVisualizationBar(i, barWidth, x, verticalCenter);\n                        drawVisualizationBar(i, barWidth, x2, verticalCenter);\n                        x += (frequencyCtx.canvas.width / (dataArray.length - zeroAdjust)) / 2;\n                        x2 -= (frequencyCtx.canvas.width / (dataArray.length - zeroAdjust)) / 2;\n                    }\n                    avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n                    highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n                    midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n                    lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n                    lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n                    frequencyCtx.globalAlpha = (Math.abs(0.2 - (avgAmplitude / 200)) + 0.1) / 2;\n                }\n\n                //smudge effect\n                rotateSmudge = (rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8) || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n                if (rotateSmudge) {\n                    smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n                    rotationAngle = (rotationAngle + 1) % 360;\n                    smudgeVelocity = (lowFreqAvgAmplitude) / 5 * (midFreqAvgAmplitude < highFreqAvgAmplitude * 2)? -1: 1;\n                    // Save the current canvas state\n                    smudgeCtx.save();\n                    // Rotate the canvas\n                    smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n                    smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n                    smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n                    // Draw the smudged image on the canvas\n                    smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n                    // Restore the canvas state\n                    smudgeCtx.restore();\n                    smudgeCtx.globalAlpha = Math.abs(0.04 - (avgAmplitude / 4000));\n                } else {\n                    rotationAngle = 0;\n                    var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n                    var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n                    smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n                    smudgeCtx.globalAlpha = 0.5 - (avgAmplitude / 100);\n                    smudgeVelocity = (avgAmplitude < 10)? avgAmplitude * 2: ((lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.5 > midFreqAvgAmplitude + highFreqAvgAmplitude)? -1: 1) * avgAmplitude / 4;\n                    smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n                    smudgeCtx.putImageData(imageDataBottom, 0, (smudgeCtx.canvas.height / 2) + smudgeVelocity);\n                    smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n                }\n            }\n        \n            function getAverageAmplitude(data, startIndex, endIndex) {\n                startIndex = Math.trunc(startIndex);\n                endIndex = Math.min(Math.trunc(endIndex), data.length);\n                let sum = 0;\n                for (let i = startIndex; i < endIndex; i++) {\n                    sum += data[i];\n                }\n                return sum / (endIndex - startIndex - 1);\n            }\n        \n            function getPeakAmplitude(data, startIndex, endIndex) {\n                startIndex = Math.trunc(startIndex);\n                endIndex = Math.min(Math.trunc(endIndex), data.length);\n                let peak = 0;\n                for (let i = startIndex; i < endIndex; i++) {\n                    peak = Math.max(peak, data[i]);\n                }\n                return peak;\n            }\n        \n            function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n                if (dataArray[index] > ultimatePeak) {\n                    ultimatePeak = dataArray[index];\n                }\n                //take the square of the data like this will amplify peaks\n                const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - (index / dataArray.length))) * ((index + (dataArray.length / 2)) / dataArray.length);\n                let barHeight = adjustedData;\n                let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n                let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n                let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n                frequencyCtx.fillRect(x + offsetX, verticalCenter - (barHeight / 4) + offsetY, barWidth + offsetWidth, barHeight / 2);\n            }\n        \n            let lowFreqShiftingColorNumber = 0;\n            function getLowFrequencyColor(dataArray) {\n                let lowFrequencySum = 0;\n                let lowFrequencyMax = 0;\n                for (let i = 0; i < dataArray.length / 2; i++) {\n                    lowFrequencySum += dataArray[i];\n                    if (dataArray[i] > lowFrequencyMax) {\n                        lowFrequencyMax = dataArray[i];\n                    }\n                }\n                let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n                if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n                    lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + (lowFrequencyMax / (lowFrequencyAverage * 20)) + (lowFrequencyAverage / ultimatePeak)) % 255;\n                }\n                return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%,` + (lowFrequencySum / (lowFrequencyMax + 0.1)) + `)`;\n            }\n        \n            let highFreqShiftingColorNumber = 0;\n            function getHighFrequencyColor(dataArray) {\n                let highFrequencySum = 0;\n                let highFrequencyMax = 0;\n                for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n                    highFrequencySum += dataArray[i];\n                    if (dataArray[i] > highFrequencyMax) {\n                        highFrequencyMax = dataArray[i];\n                    }\n                }\n                let highFrequencyAverage = highFrequencySum / (dataArray.length/ 2);\n                if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n                    highFreqShiftingColorNumber = (highFreqShiftingColorNumber + (highFrequencyMax / (highFrequencyAverage * 200)) + (highFrequencyAverage / ultimatePeak)) % 255;\n                }\n                return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%,` + (highFrequencySum / (highFrequencyMax + 0.1)) + `)`;\n            }\n        \n            function map(value, start1, stop1, start2, stop2) {\n                return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n            }\n\n            drawVisualization();\n        }\n    }, [analyser, source, audioCtx]);\n\n    useEffect(() => {\n        if (audioCtx && audioElement) {\n            setAnalyser(audioCtx.createAnalyser());\n            setSource(audioCtx.createMediaElementSource(audioElement));\n        }\n    }, [audioCtx, audioElement]);\n\n    useEffect(() => {\n        if (audioElement) {\n            function updateScrubBar() {\n                if(audioElement && scrubBarRef.current) {\n                    let currentTime = audioElement.currentTime;\n                    let duration = audioElement.duration;\n                    let scrubBarValue = (currentTime/duration) * 100;\n                    scrubBarRef.current.value = scrubBarValue;\n                }\n            }\n            audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n            audioElement.src = (fileInputRef.current && fileInputRef.current.files[0])? URL.createObjectURL(fileInputRef.current.files[0]): process.env.PUBLIC_URL + '/music/song.mp3';\n            audioElement.addEventListener(\"loadeddata\", () => {\n                setLoaded(true);\n            });\n            audioElement.addEventListener(\"ended\", () => {\n                setPlay(false);\n            });\n            setAudioCtx(new (window.AudioContext || window.webkitAudioContext)());\n        }\n    }, [audioElement]);\n\n    // Initialize audio context and elements when the file input changes\n    function loadAudio() {\n        if (audioElement) {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n        }\n        setAnalyser(null);\n        setSource(null);\n        setAudioCtx(null);\n        setAudioElement(new Audio());\n    }\n\n    function updatePlayback() {\n        if(audioElement && scrubBarRef.current) {\n            let scrubBarValue = scrubBarRef.current.value;\n            let currentTime = (scrubBarValue / 100) * audioElement.duration;\n            audioElement.currentTime = currentTime;\n        }\n    }\n\n    function togglePlay(given) {\n        if (audioElement && audioCtx) {\n            audioCtx.resume();\n            if ((given === true) || audioElement.paused) {\n                audioElement.play();\n                setPlay(true);\n            } else {\n                audioElement.pause();\n                setPlay(false);\n            }\n        } else {\n            loadAudio();\n        }\n    }\n\n    return (\n        <VisibilitySensor onChange={setIsVisible}>\n            <div style={props.style} className='canvas-area no-select' ref={canvasAreaRef}>\n                <br />\n                <br />\n                <div className=\"main-header-container\">\n                    <h2 className={\"main-header\"} style={play?{opacity: 0, transition: \"2s opacity\"}:{opacity: 0.8, transition: \"3s opacity\"}}>David Mash</h2>\n                </div>\n                <div className=\"control-panel\" onClick={togglePlay}>\n                    {play?\n                    <img alt={\"\"} src={process.env.PUBLIC_URL + '/images/pause-button.png'} className={\"pause-button\"} />\n                    :\n                    <img alt={\"\"} src={process.env.PUBLIC_URL + '/images/play-button.png'} className={\"play-button\"} />\n                    }\n                </div>\n                <br />\n                <canvas ref={frequencyRef} id=\"frequency\" onClick={togglePlay}/>\n                <canvas ref={backgroundRef} id=\"background\" />\n                <img\n                    alt={\"\"}\n                    src={process.env.PUBLIC_URL + '/images/main_images/' + props.imageNumber + '.jpeg'}\n                    style={{objectFit: \"cover\", minHeight: \"100%\", height: \"100%\", minWidth: \"100%\", width: \"auto\", position: \"absolute\", zIndex: \"-3\", top: \"0px\", left: \"0px\"}}\n                />\n                <div\n                    className='bottom-controls'\n                    onMouseOver={() => {if (!mouseOverBottom) setMouseOverBottom(true);}}\n                    onMouseLeave={() => {if (mouseOverBottom) setMouseOverBottom(false);}}\n                    style={mouseOverBottom?{opacity: 0.7, transition: \"opacity 300ms\"}:play?{opacity: 0, transition: \"opacity 300ms\"}:{opacity: 0.4, transition: \"opacity 300ms\"}}\n                >\n                    <input\n                        ref={scrubBarRef}\n                        className=\"scrub-bar\"\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"100\"\n                        defaultValue={0}\n                        id=\"scrub-bar\"\n                        disabled={!loaded}\n                        onChange={() => {updatePlayback();}}\n                    />\n                    {/*<input className={\"file-input\"} type=\"file\" ref={fileInputRef} onChange={loadAudio} />*/}\n                </div>\n            </div>\n        </VisibilitySensor>\n    );\n}\n\nexport default AudioVisualizer;\n",{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":14,"column":12,"nodeType":"123","messageId":"124","endLine":14,"endColumn":21},{"ruleId":"117","replacedBy":"125"},{"ruleId":"119","replacedBy":"126"},{"ruleId":"121","severity":1,"message":"122","line":17,"column":12,"nodeType":"123","messageId":"124","endLine":17,"endColumn":21},{"ruleId":"127","severity":1,"message":"128","line":199,"column":8,"nodeType":"129","endLine":199,"endColumn":36,"suggestions":"130"},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-unused-vars","'isVisible' is assigned a value but never used.","Identifier","unusedVar",["131"],["132"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'togglePlay'. Either include it or remove the dependency array.","ArrayExpression",["133"],"no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},"Update the dependencies array to be: [analyser, source, audioCtx, togglePlay]",{"range":"136","text":"137"},[11515,11543],"[analyser, source, audioCtx, togglePlay]"]