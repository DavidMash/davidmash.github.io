{"ast":null,"code":"var _jsxFileName = \"/Users/davidmash/Documents/portfolio/src/Components/AudioVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport PlayButton from './PlayButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AudioVisualizer(props) {\n  _s();\n  const [audioElement, setAudioElement] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n  const canvasAreaRef = useRef(null);\n  const fileInputRef = useRef(null);\n  const frequencyRef = useRef(null);\n  const backgroundRef = useRef(null);\n  const scrubBarRef = useRef(null);\n  useEffect(() => {\n    if (audioElement) {\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const source = audioCtx.createMediaElementSource(audioElement);\n      const analyser = audioCtx.createAnalyser();\n      source.connect(analyser);\n      analyser.connect(audioCtx.destination);\n      const bufferLength = analyser.frequencyBinCount;\n      let dataArray = new Uint8Array(bufferLength);\n      function updateScrubBar() {\n        if (audioElement && scrubBarRef.current) {\n          let currentTime = audioElement.currentTime;\n          let duration = audioElement.duration;\n          let scrubBarValue = currentTime / duration * 100;\n          scrubBarRef.current.value = scrubBarValue;\n        }\n      }\n      audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n      audioElement.src = fileInputRef.current.files[0] ? URL.createObjectURL(fileInputRef.current.files[0]) : process.env.PUBLIC_URL + '/music/song.mp3';\n      audioElement.addEventListener(\"loadeddata\", () => {\n        setLoaded(true);\n      });\n      audioElement.addEventListener(\"ended\", () => {\n        setPlay(false);\n      });\n      frequencyRef.current.willReadFrequently = true;\n      backgroundRef.current.willReadFrequently = true;\n      const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n      const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n      backgroundRef.current.style.width = '100%';\n      backgroundRef.current.style.height = '100%';\n      frequencyRef.current.stylewidth = '100%';\n      frequencyRef.current.style.height = '100%';\n      backgroundRef.current.width = canvasAreaRef.current.offsetWidth;\n      backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n      frequencyRef.current.width = canvasAreaRef.current.offsetWidth;\n      frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n      canvasAreaRef.current.addEventListener(\"resize\", () => {\n        backgroundRef.current.width = canvasAreaRef.current.offsetWidth;\n        backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n        frequencyRef.current.width = canvasAreaRef.current.offsetWidth;\n        frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n      });\n      let ultimatePeak = 1;\n      let rotationAngle = 0;\n      let rotateSmudge = false;\n      let smudgeVelocity = 0;\n      // Draw the frequency spectrum visualization\n      function drawVisualization() {\n        requestAnimationFrame(drawVisualization);\n        analyser.getByteFrequencyData(dataArray);\n\n        // draw current frame to main canvas\n        frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvas.height);\n        let avgAmplitude = 0;\n        let highFreqAvgAmplitude = 0;\n        let midFreqAvgAmplitude = 0;\n        let lowFreqAvgAmplitude = 0;\n        let lowFreqPeakAmplitude = 0;\n        if (dataArray && dataArray.length > 0) {\n          let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n          let highFrequencyColor = getHighFrequencyColor(dataArray);\n          gradient.addColorStop(0, highFrequencyColor);\n          gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n          gradient.addColorStop(1, highFrequencyColor);\n          frequencyCtx.fillStyle = gradient;\n          let verticalCenter = frequencyCtx.canvas.height / 2;\n          let zeroAdjust = 0;\n          for (let i = dataArray.length - 1; i >= 0; i--) {\n            if (dataArray[i] - 20 > 0) break;\n            zeroAdjust++;\n          }\n          let barWidth = frequencyCtx.canvas.width / dataArray.length / 2;\n          let x = 0;\n          let x2 = frequencyCtx.canvas.width;\n          for (let i = 0; i < dataArray.length - zeroAdjust; i++) {\n            drawVisualizationBar(i, barWidth, x, verticalCenter);\n            drawVisualizationBar(i, barWidth, x2, verticalCenter);\n            x += frequencyCtx.canvas.width / (dataArray.length - zeroAdjust) / 2;\n            x2 -= frequencyCtx.canvas.width / (dataArray.length - zeroAdjust) / 2;\n          }\n          avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n          highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n          midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n          lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n          lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n          frequencyCtx.globalAlpha = (Math.abs(0.2 - avgAmplitude / 100) + 0.1) / 4;\n        }\n\n        //smudge effect\n        rotateSmudge = rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8 || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n        if (rotateSmudge) {\n          smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n          rotationAngle = (rotationAngle + 1) % 360;\n          smudgeVelocity = lowFreqAvgAmplitude / 5 * (midFreqAvgAmplitude < highFreqAvgAmplitude * 2) ? -1 : 1;\n          // Save the current canvas state\n          smudgeCtx.save();\n          // Rotate the canvas\n          smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n          smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n          smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n          // Draw the smudged image on the canvas\n          smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n          // Restore the canvas state\n          smudgeCtx.restore();\n          smudgeCtx.globalAlpha = Math.abs(0.04 - avgAmplitude / 4000);\n        } else {\n          rotationAngle = 0;\n          var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n          var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n          smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n          smudgeCtx.globalAlpha = 0.5 - avgAmplitude / 100;\n          smudgeVelocity = avgAmplitude < 10 ? avgAmplitude * 2 : (lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.5 > midFreqAvgAmplitude + highFreqAvgAmplitude ? -1 : 1) * avgAmplitude / 4;\n          smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n          smudgeCtx.putImageData(imageDataBottom, 0, smudgeCtx.canvas.height / 2 + smudgeVelocity);\n          smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n        }\n      }\n      function getAverageAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let sum = 0;\n        for (let i = startIndex; i < endIndex; i++) {\n          sum += data[i];\n        }\n        return sum / (endIndex - startIndex - 1);\n      }\n      function getPeakAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let peak = 0;\n        for (let i = startIndex; i < endIndex; i++) {\n          peak = Math.max(peak, data[i]);\n        }\n        return peak;\n      }\n      function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n        if (dataArray[index] > ultimatePeak) {\n          ultimatePeak = dataArray[index];\n        }\n        //take the square of the data like this will amplify peaks\n        const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - index / dataArray.length)) * ((index + dataArray.length / 2) / dataArray.length);\n        let barHeight = adjustedData;\n        let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n        frequencyCtx.fillRect(x + offsetX, verticalCenter - barHeight / 4 + offsetY, barWidth + offsetWidth, barHeight / 2);\n      }\n      let lowFreqShiftingColorNumber = 0;\n      function getLowFrequencyColor(dataArray) {\n        let lowFrequencySum = 0;\n        let lowFrequencyMax = 0;\n        for (let i = 0; i < dataArray.length / 2; i++) {\n          lowFrequencySum += dataArray[i];\n          if (dataArray[i] > lowFrequencyMax) {\n            lowFrequencyMax = dataArray[i];\n          }\n        }\n        let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n        if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n          lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + lowFrequencyMax / (lowFrequencyAverage * 20) + lowFrequencyAverage / ultimatePeak) % 255;\n        }\n        return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%,` + lowFrequencySum / (lowFrequencyMax + 0.1) + `)`;\n      }\n      let highFreqShiftingColorNumber = 0;\n      function getHighFrequencyColor(dataArray) {\n        let highFrequencySum = 0;\n        let highFrequencyMax = 0;\n        for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n          highFrequencySum += dataArray[i];\n          if (dataArray[i] > highFrequencyMax) {\n            highFrequencyMax = dataArray[i];\n          }\n        }\n        let highFrequencyAverage = highFrequencySum / (dataArray.length / 2);\n        if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n          highFreqShiftingColorNumber = (highFreqShiftingColorNumber + highFrequencyMax / (highFrequencyAverage * 200) + highFrequencyAverage / ultimatePeak) % 255;\n        }\n        return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%,` + highFrequencySum / (highFrequencyMax + 0.1) + `)`;\n      }\n      function map(value, start1, stop1, start2, stop2) {\n        return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n      }\n      drawVisualization();\n    }\n  }, [audioElement]);\n\n  // Initialize audio context and elements when the file input changes\n  function loadAudio() {\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n    }\n    setAudioElement(new Audio());\n  }\n  function updatePlayback() {\n    if (audioElement && scrubBarRef.current) {\n      let scrubBarValue = scrubBarRef.current.value;\n      let currentTime = scrubBarValue / 100 * audioElement.duration;\n      audioElement.currentTime = currentTime;\n    }\n  }\n  function togglePlay() {\n    if (audioElement) {\n      if (audioElement.paused) {\n        audioElement.play();\n      } else {\n        audioElement.pause();\n      }\n    }\n  }\n  if (!audioElement) {\n    loadAudio();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: props.style,\n    className: \"canvas-area\",\n    ref: canvasAreaRef,\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        ref: fileInputRef,\n        onChange: loadAudio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this), loaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(PlayButton, {\n        onClick: togglePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: scrubBarRef,\n        type: \"range\",\n        min: \"0\",\n        max: \"100\",\n        defaultValue: 0,\n        id: \"scrub-bar\",\n        disabled: !loaded,\n        onChange: updatePlayback()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: frequencyRef,\n      id: \"frequency\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: backgroundRef,\n      id: \"background\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      alt: \"\",\n      src: process.env.PUBLIC_URL + '/images/main_images/' + props.imageNumber + '.jpeg',\n      style: {\n        objectFit: \"cover\",\n        height: \"100%\",\n        minWidth: \"100%\",\n        width: \"auto\",\n        position: \"absolute\",\n        zIndex: \"-3\",\n        top: \"0px\",\n        left: \"0px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 9\n  }, this);\n}\n_s(AudioVisualizer, \"r1WVj0KPGaWP3DnwcyFqYU+koS8=\");\n_c = AudioVisualizer;\nexport default AudioVisualizer;\nvar _c;\n$RefreshReg$(_c, \"AudioVisualizer\");","map":{"version":3,"names":["React","useRef","useState","useEffect","PlayButton","AudioVisualizer","props","audioElement","setAudioElement","loaded","setLoaded","canvasAreaRef","fileInputRef","frequencyRef","backgroundRef","scrubBarRef","audioCtx","window","AudioContext","webkitAudioContext","source","createMediaElementSource","analyser","createAnalyser","connect","destination","bufferLength","frequencyBinCount","dataArray","Uint8Array","updateScrubBar","current","currentTime","duration","scrubBarValue","value","addEventListener","src","files","URL","createObjectURL","process","env","PUBLIC_URL","setPlay","willReadFrequently","frequencyCtx","getContext","smudgeCtx","style","width","height","stylewidth","offsetWidth","offsetHeight","ultimatePeak","rotationAngle","rotateSmudge","smudgeVelocity","drawVisualization","requestAnimationFrame","getByteFrequencyData","clearRect","canvas","avgAmplitude","highFreqAvgAmplitude","midFreqAvgAmplitude","lowFreqAvgAmplitude","lowFreqPeakAmplitude","length","gradient","createLinearGradient","highFrequencyColor","getHighFrequencyColor","addColorStop","getLowFrequencyColor","fillStyle","verticalCenter","zeroAdjust","i","barWidth","x","x2","drawVisualizationBar","getAverageAmplitude","getPeakAmplitude","globalAlpha","Math","abs","drawImage","save","translate","rotate","PI","restore","imageDataTop","getImageData","imageDataBottom","putImageData","data","startIndex","endIndex","trunc","min","sum","peak","max","index","adjustedData","pow","barHeight","offsetX","random","offsetY","fillRect","lowFreqShiftingColorNumber","lowFrequencySum","lowFrequencyMax","lowFrequencyAverage","map","highFreqShiftingColorNumber","highFrequencySum","highFrequencyMax","highFrequencyAverage","start1","stop1","start2","stop2","loadAudio","pause","Audio","updatePlayback","togglePlay","paused","play","imageNumber","objectFit","minWidth","position","zIndex","top","left"],"sources":["/Users/davidmash/Documents/portfolio/src/Components/AudioVisualizer.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport PlayButton from './PlayButton';\n\nfunction AudioVisualizer(props) {\n    const [audioElement, setAudioElement] = useState(null);\n    const [loaded, setLoaded] = useState(false);\n    const canvasAreaRef = useRef(null);\n    const fileInputRef = useRef(null);\n    const frequencyRef = useRef(null);\n    const backgroundRef = useRef(null);\n    const scrubBarRef = useRef(null);\n\n    useEffect(() => {\n        if (audioElement) {\n            const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n            const source = audioCtx.createMediaElementSource(audioElement);\n            const analyser = audioCtx.createAnalyser();\n            source.connect(analyser);\n            analyser.connect(audioCtx.destination);\n            const bufferLength = analyser.frequencyBinCount;\n            let dataArray = new Uint8Array(bufferLength);\n\n            function updateScrubBar() {\n                if(audioElement && scrubBarRef.current) {\n                    let currentTime = audioElement.currentTime;\n                    let duration = audioElement.duration;\n                    let scrubBarValue = (currentTime/duration)*100;\n                    scrubBarRef.current.value = scrubBarValue;\n                }\n            }\n\n            audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n            audioElement.src = (fileInputRef.current.files[0])? URL.createObjectURL(fileInputRef.current.files[0]): process.env.PUBLIC_URL + '/music/song.mp3';\n            audioElement.addEventListener(\"loadeddata\", () => {\n                setLoaded(true);\n            });\n            audioElement.addEventListener(\"ended\", () => {\n                setPlay(false);\n            });\n\n            frequencyRef.current.willReadFrequently = true;\n            backgroundRef.current.willReadFrequently = true;\n            const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n            const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n            backgroundRef.current.style.width ='100%';\n            backgroundRef.current.style.height='100%';\n            frequencyRef.current.stylewidth ='100%';\n            frequencyRef.current.style.height='100%';\n            backgroundRef.current.width  = canvasAreaRef.current.offsetWidth;\n            backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n            frequencyRef.current.width  = canvasAreaRef.current.offsetWidth;\n            frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n\n            canvasAreaRef.current.addEventListener(\"resize\", () => {\n                backgroundRef.current.width  = canvasAreaRef.current.offsetWidth;\n                backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n                frequencyRef.current.width  = canvasAreaRef.current.offsetWidth;\n                frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n            });\n\n            let ultimatePeak = 1;\n            let rotationAngle = 0;\n            let rotateSmudge = false;\n            let smudgeVelocity = 0;\n            // Draw the frequency spectrum visualization\n            function drawVisualization() {\n                requestAnimationFrame(drawVisualization);\n                analyser.getByteFrequencyData(dataArray);\n                \n                // draw current frame to main canvas\n                frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvas.height);\n        \n                let avgAmplitude = 0;\n                let highFreqAvgAmplitude = 0;\n                let midFreqAvgAmplitude = 0;\n                let lowFreqAvgAmplitude = 0;\n                let lowFreqPeakAmplitude = 0;\n                if (dataArray && dataArray.length > 0) {\n                    let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n                    let highFrequencyColor = getHighFrequencyColor(dataArray);\n                    gradient.addColorStop(0, highFrequencyColor);\n                    gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n                    gradient.addColorStop(1, highFrequencyColor);\n                    frequencyCtx.fillStyle = gradient;\n                    let verticalCenter = frequencyCtx.canvas.height / 2;\n                    let zeroAdjust = 0;\n                    for (let i = dataArray.length - 1; i >= 0; i--) {\n                        if (dataArray[i] - 20 > 0) break;\n                        zeroAdjust++;\n                    }\n                    let barWidth = ((frequencyCtx.canvas.width / dataArray.length)) / 2;\n                    let x = 0;\n                    let x2 = frequencyCtx.canvas.width;\n                    for (let i = 0; i < dataArray.length - zeroAdjust; i++) {\n                        drawVisualizationBar(i, barWidth, x, verticalCenter);\n                        drawVisualizationBar(i, barWidth, x2, verticalCenter);\n                        x += (frequencyCtx.canvas.width / (dataArray.length - zeroAdjust)) / 2;\n                        x2 -= (frequencyCtx.canvas.width / (dataArray.length - zeroAdjust)) / 2;\n                    }\n                    avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n                    highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n                    midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n                    lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n                    lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n                    frequencyCtx.globalAlpha = (Math.abs(0.2 - (avgAmplitude / 100)) + 0.1) / 4;\n                }\n\n                //smudge effect\n                rotateSmudge = (rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8) || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n                if (rotateSmudge) {\n                    smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n                    rotationAngle = (rotationAngle + 1) % 360;\n                    smudgeVelocity = (lowFreqAvgAmplitude) / 5 * (midFreqAvgAmplitude < highFreqAvgAmplitude * 2)? -1: 1;\n                    // Save the current canvas state\n                    smudgeCtx.save();\n                    // Rotate the canvas\n                    smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n                    smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n                    smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n                    // Draw the smudged image on the canvas\n                    smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n                    // Restore the canvas state\n                    smudgeCtx.restore();\n                    smudgeCtx.globalAlpha = Math.abs(0.04 - (avgAmplitude / 4000));\n                } else {\n                    rotationAngle = 0;\n                    var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n                    var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n                    smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n                    smudgeCtx.globalAlpha = 0.5 - (avgAmplitude / 100);\n                    smudgeVelocity = (avgAmplitude < 10)? avgAmplitude * 2: ((lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.5 > midFreqAvgAmplitude + highFreqAvgAmplitude)? -1: 1) * avgAmplitude / 4;\n                    smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n                    smudgeCtx.putImageData(imageDataBottom, 0, (smudgeCtx.canvas.height / 2) + smudgeVelocity);\n                    smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n                }\n            }\n        \n            function getAverageAmplitude(data, startIndex, endIndex) {\n                startIndex = Math.trunc(startIndex);\n                endIndex = Math.min(Math.trunc(endIndex), data.length);\n                let sum = 0;\n                for (let i = startIndex; i < endIndex; i++) {\n                    sum += data[i];\n                }\n                return sum / (endIndex - startIndex - 1);\n            }\n        \n            function getPeakAmplitude(data, startIndex, endIndex) {\n                startIndex = Math.trunc(startIndex);\n                endIndex = Math.min(Math.trunc(endIndex), data.length);\n                let peak = 0;\n                for (let i = startIndex; i < endIndex; i++) {\n                    peak = Math.max(peak, data[i]);\n                }\n                return peak;\n            }\n        \n            function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n                if (dataArray[index] > ultimatePeak) {\n                    ultimatePeak = dataArray[index];\n                }\n                //take the square of the data like this will amplify peaks\n                const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - (index / dataArray.length))) * ((index + (dataArray.length / 2)) / dataArray.length);\n                let barHeight = adjustedData;\n                let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n                let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n                let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n                frequencyCtx.fillRect(x + offsetX, verticalCenter - (barHeight / 4) + offsetY, barWidth + offsetWidth, barHeight / 2);\n            }\n        \n            let lowFreqShiftingColorNumber = 0;\n            function getLowFrequencyColor(dataArray) {\n                let lowFrequencySum = 0;\n                let lowFrequencyMax = 0;\n                for (let i = 0; i < dataArray.length / 2; i++) {\n                    lowFrequencySum += dataArray[i];\n                    if (dataArray[i] > lowFrequencyMax) {\n                        lowFrequencyMax = dataArray[i];\n                    }\n                }\n                let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n                if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n                    lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + (lowFrequencyMax / (lowFrequencyAverage * 20)) + (lowFrequencyAverage / ultimatePeak)) % 255;\n                }\n                return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%,` + (lowFrequencySum / (lowFrequencyMax + 0.1)) + `)`;\n            }\n        \n            let highFreqShiftingColorNumber = 0;\n            function getHighFrequencyColor(dataArray) {\n                let highFrequencySum = 0;\n                let highFrequencyMax = 0;\n                for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n                    highFrequencySum += dataArray[i];\n                    if (dataArray[i] > highFrequencyMax) {\n                        highFrequencyMax = dataArray[i];\n                    }\n                }\n                let highFrequencyAverage = highFrequencySum / (dataArray.length/ 2);\n                if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n                    highFreqShiftingColorNumber = (highFreqShiftingColorNumber + (highFrequencyMax / (highFrequencyAverage * 200)) + (highFrequencyAverage / ultimatePeak)) % 255;\n                }\n                return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%,` + (highFrequencySum / (highFrequencyMax + 0.1)) + `)`;\n            }\n        \n            function map(value, start1, stop1, start2, stop2) {\n                return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n            }\n\n            drawVisualization();\n        }\n    }, [audioElement]);\n\n    // Initialize audio context and elements when the file input changes\n    function loadAudio() {\n        if (audioElement) {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n        }\n        setAudioElement(new Audio());\n    }\n\n    function updatePlayback() {\n        if(audioElement && scrubBarRef.current) {\n            let scrubBarValue = scrubBarRef.current.value;\n            let currentTime = (scrubBarValue / 100) * audioElement.duration;\n            audioElement.currentTime = currentTime;\n        }\n    }\n\n    function togglePlay() {\n        if (audioElement) {\n            if (audioElement.paused) {\n                audioElement.play();\n            } else {\n                audioElement.pause();\n            }\n        }\n    }\n\n    if (!audioElement) {\n        loadAudio();\n    }\n\n    return (\n        <div style={props.style} className='canvas-area' ref={canvasAreaRef}>\n            <br />\n            <br />\n            <div className=\"control-panel\">\n                <input type=\"file\" ref={fileInputRef} onChange={loadAudio} />\n            </div>\n            {loaded?\n            <div className=\"control-panel\">\n                <PlayButton onClick={togglePlay} />\n                <input ref={scrubBarRef} type=\"range\" min=\"0\" max=\"100\" defaultValue={0} id=\"scrub-bar\" disabled={!loaded} onChange={updatePlayback()}/>\n            </div>\n            :\n            <></>\n            }\n            <br />\n            <canvas ref={frequencyRef} id=\"frequency\" />\n            <canvas ref={backgroundRef} id=\"background\" />\n            <img alt={\"\"} src={process.env.PUBLIC_URL + '/images/main_images/' + props.imageNumber + '.jpeg'} style={{objectFit: \"cover\", height: \"100%\", minWidth: \"100%\", width: \"auto\", position: \"absolute\", zIndex: \"-3\", top: \"0px\", left: \"0px\"}}/>\n        </div>\n    );\n}\n\nexport default AudioVisualizer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}