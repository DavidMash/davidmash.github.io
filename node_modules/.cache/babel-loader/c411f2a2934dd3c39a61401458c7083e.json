{"ast":null,"code":"// myWorker.js\n\nlet audioCtx, analyser, source, bufferLength, dataArray, fileInputRef, canvasWidth, canvasHeight, scrubBarRef, setLoaded, setPlay, frequencyRef, backgroundRef;\nonmessage = e => {\n  fileInputRef = e.data.fileInputRef;\n  canvasWidth = e.data.canvasWidth;\n  canvasHeight = e.data.canvasHeight;\n  scrubBarRef = e.data.scrubBarRef;\n  setLoaded = e.data.setLoaded;\n  setPlay = e.data.setPlay;\n  frequencyRef = e.data.frequencyRef;\n  backgroundRef = e.data.backgroundRef;\n  audioCtx = new AudioContext();\n  source = audioCtx.createMediaElementSource(new Audio());\n  analyser = audioCtx.createAnalyser();\n  source.connect(analyser);\n  analyser.connect(audioCtx.destination);\n  bufferLength = analyser.frequencyBinCount;\n  dataArray = new Uint8Array(bufferLength);\n  if (fileInputRef) {\n    fileInputRef.current.addEventListener(\"change\", handleFileInput);\n  }\n};\nfunction handleFileInput() {\n  let audioElement = new Audio();\n  audioElement.src = fileInputRef.current && fileInputRef.current.files[0] ? URL.createObjectURL(fileInputRef.current.files[0]) : process.env.PUBLIC_URL + '/music/song.mp3';\n  source.disconnect();\n  source = audioCtx.createMediaElementSource(audioElement);\n  source.connect(analyser);\n  audioElement.addEventListener(\"loadeddata\", () => {\n    postMessage({\n      type: 'loaded'\n    });\n  });\n  audioElement.addEventListener(\"timeupdate\", () => {\n    let currentTime = audioElement.currentTime;\n    let duration = audioElement.duration;\n    let scrubBarValue = currentTime / duration * 100;\n    postMessage({\n      type: 'scrubBarValue',\n      value: scrubBarValue\n    });\n  });\n  function updateScrubBar() {\n    if (audioElement && scrubBarRef.current) {\n      let currentTime = audioElement.currentTime;\n      let duration = audioElement.duration;\n      let scrubBarValue = currentTime / duration * 100;\n      scrubBarRef.current.value = scrubBarValue;\n    }\n  }\n  audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n  audioElement.addEventListener(\"loadeddata\", () => {\n    setLoaded(true);\n  });\n  audioElement.addEventListener(\"ended\", () => {\n    setPlay(false);\n  });\n  frequencyRef.current.willReadFrequently = true;\n  backgroundRef.current.willReadFrequently = true;\n  const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n  const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n  backgroundRef.current.style.width = '100%';\n  backgroundRef.current.style.height = '100%';\n  frequencyRef.current.style.width = '100%';\n  frequencyRef.current.style.height = '100%';\n  backgroundRef.current.width = canvasWidth;\n  backgroundRef.current.height = canvasHeight;\n  frequencyRef.current.width = canvasWidth;\n  frequencyRef.current.height = canvasHeight;\n  canvasAreaRef.current.addEventListener(\"resize\", () => {\n    backgroundRef.current.width = canvasWidth;\n    backgroundRef.current.height = canvasHeight;\n    frequencyRef.current.width = canvasWidth;\n    frequencyRef.current.height = canvasHeight;\n  });\n  let ultimatePeak = 1;\n  let rotationAngle = 0;\n  let rotateSmudge = false;\n  let smudgeVelocity = 0;\n  // Draw the frequency spectrum visualization\n  function drawVisualization() {\n    requestIdleCallback(drawVisualization);\n    analyser.getByteFrequencyData(dataArray);\n\n    // draw current frame to main canvas\n    frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvas.height);\n    let avgAmplitude = 0;\n    let highFreqAvgAmplitude = 0;\n    let midFreqAvgAmplitude = 0;\n    let lowFreqAvgAmplitude = 0;\n    let lowFreqPeakAmplitude = 0;\n    if (dataArray && dataArray.length > 0) {\n      let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n      let highFrequencyColor = getHighFrequencyColor(dataArray);\n      gradient.addColorStop(0, highFrequencyColor);\n      gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n      gradient.addColorStop(1, highFrequencyColor);\n      frequencyCtx.fillStyle = gradient;\n      let verticalCenter = frequencyCtx.canvas.height / 2;\n      let zeroAdjust = 0;\n      for (let i = dataArray.length - 1; i >= 0; i--) {\n        if (dataArray[i] - 20 > 0) break;\n        zeroAdjust++;\n      }\n      let barWidth = frequencyCtx.canvas.width / dataArray.length / 2;\n      let x = 0;\n      let x2 = frequencyCtx.canvas.width;\n      for (let i = 0; i < dataArray.length - zeroAdjust; i++) {\n        drawVisualizationBar(i, barWidth, x, verticalCenter);\n        drawVisualizationBar(i, barWidth, x2, verticalCenter);\n        x += frequencyCtx.canvas.width / (dataArray.length - zeroAdjust) / 2;\n        x2 -= frequencyCtx.canvas.width / (dataArray.length - zeroAdjust) / 2;\n      }\n      avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n      highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n      midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n      lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n      lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n      frequencyCtx.globalAlpha = (Math.abs(0.2 - avgAmplitude / 200) + 0.1) / 2;\n    }\n\n    //smudge effect\n    rotateSmudge = rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8 || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n    if (rotateSmudge) {\n      smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n      rotationAngle = (rotationAngle + 1) % 360;\n      smudgeVelocity = lowFreqAvgAmplitude / 5 * (midFreqAvgAmplitude < highFreqAvgAmplitude * 2) ? -1 : 1;\n      // Save the current canvas state\n      smudgeCtx.save();\n      // Rotate the canvas\n      smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n      smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n      smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n      // Draw the smudged image on the canvas\n      smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n      // Restore the canvas state\n      smudgeCtx.restore();\n      smudgeCtx.globalAlpha = Math.abs(0.04 - avgAmplitude / 4000);\n    } else {\n      rotationAngle = 0;\n      var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n      var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n      smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n      smudgeCtx.globalAlpha = 0.5 - avgAmplitude / 100;\n      smudgeVelocity = avgAmplitude < 10 ? avgAmplitude * 2 : (lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.5 > midFreqAvgAmplitude + highFreqAvgAmplitude ? -1 : 1) * avgAmplitude / 4;\n      smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n      smudgeCtx.putImageData(imageDataBottom, 0, smudgeCtx.canvas.height / 2 + smudgeVelocity);\n      smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n    }\n  }\n  function getAverageAmplitude(data, startIndex, endIndex) {\n    startIndex = Math.trunc(startIndex);\n    endIndex = Math.min(Math.trunc(endIndex), data.length);\n    let sum = 0;\n    for (let i = startIndex; i < endIndex; i++) {\n      sum += data[i];\n    }\n    return sum / (endIndex - startIndex - 1);\n  }\n  function getPeakAmplitude(data, startIndex, endIndex) {\n    startIndex = Math.trunc(startIndex);\n    endIndex = Math.min(Math.trunc(endIndex), data.length);\n    let peak = 0;\n    for (let i = startIndex; i < endIndex; i++) {\n      peak = Math.max(peak, data[i]);\n    }\n    return peak;\n  }\n  function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n    if (dataArray[index] > ultimatePeak) {\n      ultimatePeak = dataArray[index];\n    }\n    //take the square of the data like this will amplify peaks\n    const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - index / dataArray.length)) * ((index + dataArray.length / 2) / dataArray.length);\n    let barHeight = adjustedData;\n    let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n    let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n    let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n    frequencyCtx.fillRect(x + offsetX, verticalCenter - barHeight / 4 + offsetY, barWidth + offsetWidth, barHeight / 2);\n  }\n  let lowFreqShiftingColorNumber = 0;\n  function getLowFrequencyColor(dataArray) {\n    let lowFrequencySum = 0;\n    let lowFrequencyMax = 0;\n    for (let i = 0; i < dataArray.length / 2; i++) {\n      lowFrequencySum += dataArray[i];\n      if (dataArray[i] > lowFrequencyMax) {\n        lowFrequencyMax = dataArray[i];\n      }\n    }\n    let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n    if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n      lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + lowFrequencyMax / (lowFrequencyAverage * 20) + lowFrequencyAverage / ultimatePeak) % 255;\n    }\n    return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%,` + lowFrequencySum / (lowFrequencyMax + 0.1) + `)`;\n  }\n  let highFreqShiftingColorNumber = 0;\n  function getHighFrequencyColor(dataArray) {\n    let highFrequencySum = 0;\n    let highFrequencyMax = 0;\n    for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n      highFrequencySum += dataArray[i];\n      if (dataArray[i] > highFrequencyMax) {\n        highFrequencyMax = dataArray[i];\n      }\n    }\n    let highFrequencyAverage = highFrequencySum / (dataArray.length / 2);\n    if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n      highFreqShiftingColorNumber = (highFreqShiftingColorNumber + highFrequencyMax / (highFrequencyAverage * 200) + highFrequencyAverage / ultimatePeak) % 255;\n    }\n    return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%,` + highFrequencySum / (highFrequencyMax + 0.1) + `)`;\n  }\n  function map(value, start1, stop1, start2, stop2) {\n    return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n  }\n  drawVisualization();\n}","map":{"version":3,"names":["audioCtx","analyser","source","bufferLength","dataArray","fileInputRef","canvasWidth","canvasHeight","scrubBarRef","setLoaded","setPlay","frequencyRef","backgroundRef","onmessage","e","data","AudioContext","createMediaElementSource","Audio","createAnalyser","connect","destination","frequencyBinCount","Uint8Array","current","addEventListener","handleFileInput","audioElement","src","files","URL","createObjectURL","process","env","PUBLIC_URL","disconnect","postMessage","type","currentTime","duration","scrubBarValue","value","updateScrubBar","willReadFrequently","frequencyCtx","getContext","smudgeCtx","style","width","height","canvasAreaRef","ultimatePeak","rotationAngle","rotateSmudge","smudgeVelocity","drawVisualization","requestIdleCallback","getByteFrequencyData","clearRect","canvas","avgAmplitude","highFreqAvgAmplitude","midFreqAvgAmplitude","lowFreqAvgAmplitude","lowFreqPeakAmplitude","length","gradient","createLinearGradient","highFrequencyColor","getHighFrequencyColor","addColorStop","getLowFrequencyColor","fillStyle","verticalCenter","zeroAdjust","i","barWidth","x","x2","drawVisualizationBar","getAverageAmplitude","getPeakAmplitude","globalAlpha","Math","abs","drawImage","save","translate","rotate","PI","restore","imageDataTop","getImageData","imageDataBottom","putImageData","startIndex","endIndex","trunc","min","sum","peak","max","index","adjustedData","pow","barHeight","offsetX","random","offsetY","offsetWidth","fillRect","lowFreqShiftingColorNumber","lowFrequencySum","lowFrequencyMax","lowFrequencyAverage","map","highFreqShiftingColorNumber","highFrequencySum","highFrequencyMax","highFrequencyAverage","start1","stop1","start2","stop2"],"sources":["/Users/davidmash/Documents/portfolio/src/js/myWorker.js"],"sourcesContent":["// myWorker.js\n\nlet audioCtx, analyser, source, bufferLength, dataArray, fileInputRef, canvasWidth, canvasHeight, scrubBarRef, setLoaded, setPlay, frequencyRef, backgroundRef;\n\nonmessage = (e) => {\n    fileInputRef = e.data.fileInputRef;\n    canvasWidth = e.data.canvasWidth;\n    canvasHeight = e.data.canvasHeight;\n    scrubBarRef = e.data.scrubBarRef;\n    setLoaded = e.data.setLoaded;\n    setPlay = e.data.setPlay;\n    frequencyRef = e.data.frequencyRef;\n    backgroundRef = e.data.backgroundRef;\n\n    audioCtx = new AudioContext();\n    source = audioCtx.createMediaElementSource(new Audio());\n    analyser = audioCtx.createAnalyser();\n    source.connect(analyser);\n    analyser.connect(audioCtx.destination);\n    bufferLength = analyser.frequencyBinCount;\n    dataArray = new Uint8Array(bufferLength);\n\n    if (fileInputRef) {\n        fileInputRef.current.addEventListener(\"change\", handleFileInput);\n    }\n};\n\nfunction handleFileInput() {\n    let audioElement = new Audio();\n    audioElement.src = (fileInputRef.current && fileInputRef.current.files[0])? URL.createObjectURL(fileInputRef.current.files[0]): process.env.PUBLIC_URL + '/music/song.mp3';\n    source.disconnect();\n    source = audioCtx.createMediaElementSource(audioElement);\n    source.connect(analyser);\n\n    audioElement.addEventListener(\"loadeddata\", () => {\n        postMessage({ type: 'loaded' });\n    });\n\n    audioElement.addEventListener(\"timeupdate\", () => {\n        let currentTime = audioElement.currentTime;\n        let duration = audioElement.duration;\n        let scrubBarValue = (currentTime / duration) * 100;\n        postMessage({ type: 'scrubBarValue', value: scrubBarValue });\n    });\n\n    function updateScrubBar() {\n        if(audioElement && scrubBarRef.current) {\n            let currentTime = audioElement.currentTime;\n            let duration = audioElement.duration;\n            let scrubBarValue = (currentTime/duration) * 100;\n            scrubBarRef.current.value = scrubBarValue;\n        }\n    }\n\n    audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n    audioElement.addEventListener(\"loadeddata\", () => {\n        setLoaded(true);\n    });\n    audioElement.addEventListener(\"ended\", () => {\n        setPlay(false);\n    });\n\n    frequencyRef.current.willReadFrequently = true;\n    backgroundRef.current.willReadFrequently = true;\n    const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n    const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n    backgroundRef.current.style.width ='100%';\n    backgroundRef.current.style.height='100%';\n    frequencyRef.current.style.width ='100%';\n    frequencyRef.current.style.height='100%';\n    backgroundRef.current.width  = canvasWidth;\n    backgroundRef.current.height = canvasHeight;\n    frequencyRef.current.width  = canvasWidth;\n    frequencyRef.current.height = canvasHeight;\n\n    canvasAreaRef.current.addEventListener(\"resize\", () => {\n        backgroundRef.current.width  = canvasWidth;\n        backgroundRef.current.height = canvasHeight;\n        frequencyRef.current.width  = canvasWidth;\n        frequencyRef.current.height = canvasHeight;\n    });\n\n    let ultimatePeak = 1;\n    let rotationAngle = 0;\n    let rotateSmudge = false;\n    let smudgeVelocity = 0;\n    // Draw the frequency spectrum visualization\n    function drawVisualization() {\n        requestIdleCallback(drawVisualization);\n        analyser.getByteFrequencyData(dataArray);\n        \n        // draw current frame to main canvas\n        frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvas.height);\n\n        let avgAmplitude = 0;\n        let highFreqAvgAmplitude = 0;\n        let midFreqAvgAmplitude = 0;\n        let lowFreqAvgAmplitude = 0;\n        let lowFreqPeakAmplitude = 0;\n        if (dataArray && dataArray.length > 0) {\n            let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n            let highFrequencyColor = getHighFrequencyColor(dataArray);\n            gradient.addColorStop(0, highFrequencyColor);\n            gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n            gradient.addColorStop(1, highFrequencyColor);\n            frequencyCtx.fillStyle = gradient;\n            let verticalCenter = frequencyCtx.canvas.height / 2;\n            let zeroAdjust = 0;\n            for (let i = dataArray.length - 1; i >= 0; i--) {\n                if (dataArray[i] - 20 > 0) break;\n                zeroAdjust++;\n            }\n            let barWidth = ((frequencyCtx.canvas.width / dataArray.length)) / 2;\n            let x = 0;\n            let x2 = frequencyCtx.canvas.width;\n            for (let i = 0; i < dataArray.length - zeroAdjust; i++) {\n                drawVisualizationBar(i, barWidth, x, verticalCenter);\n                drawVisualizationBar(i, barWidth, x2, verticalCenter);\n                x += (frequencyCtx.canvas.width / (dataArray.length - zeroAdjust)) / 2;\n                x2 -= (frequencyCtx.canvas.width / (dataArray.length - zeroAdjust)) / 2;\n            }\n            avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n            highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n            midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n            lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n            lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n            frequencyCtx.globalAlpha = (Math.abs(0.2 - (avgAmplitude / 200)) + 0.1) / 2;\n        }\n\n        //smudge effect\n        rotateSmudge = (rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8) || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n        if (rotateSmudge) {\n            smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n            rotationAngle = (rotationAngle + 1) % 360;\n            smudgeVelocity = (lowFreqAvgAmplitude) / 5 * (midFreqAvgAmplitude < highFreqAvgAmplitude * 2)? -1: 1;\n            // Save the current canvas state\n            smudgeCtx.save();\n            // Rotate the canvas\n            smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n            smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n            smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n            // Draw the smudged image on the canvas\n            smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n            // Restore the canvas state\n            smudgeCtx.restore();\n            smudgeCtx.globalAlpha = Math.abs(0.04 - (avgAmplitude / 4000));\n        } else {\n            rotationAngle = 0;\n            var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n            var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n            smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n            smudgeCtx.globalAlpha = 0.5 - (avgAmplitude / 100);\n            smudgeVelocity = (avgAmplitude < 10)? avgAmplitude * 2: ((lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.5 > midFreqAvgAmplitude + highFreqAvgAmplitude)? -1: 1) * avgAmplitude / 4;\n            smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n            smudgeCtx.putImageData(imageDataBottom, 0, (smudgeCtx.canvas.height / 2) + smudgeVelocity);\n            smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n        }\n    }\n\n    function getAverageAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let sum = 0;\n        for (let i = startIndex; i < endIndex; i++) {\n            sum += data[i];\n        }\n        return sum / (endIndex - startIndex - 1);\n    }\n\n    function getPeakAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let peak = 0;\n        for (let i = startIndex; i < endIndex; i++) {\n            peak = Math.max(peak, data[i]);\n        }\n        return peak;\n    }\n\n    function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n        if (dataArray[index] > ultimatePeak) {\n            ultimatePeak = dataArray[index];\n        }\n        //take the square of the data like this will amplify peaks\n        const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - (index / dataArray.length))) * ((index + (dataArray.length / 2)) / dataArray.length);\n        let barHeight = adjustedData;\n        let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n        frequencyCtx.fillRect(x + offsetX, verticalCenter - (barHeight / 4) + offsetY, barWidth + offsetWidth, barHeight / 2);\n    }\n\n    let lowFreqShiftingColorNumber = 0;\n    function getLowFrequencyColor(dataArray) {\n        let lowFrequencySum = 0;\n        let lowFrequencyMax = 0;\n        for (let i = 0; i < dataArray.length / 2; i++) {\n            lowFrequencySum += dataArray[i];\n            if (dataArray[i] > lowFrequencyMax) {\n                lowFrequencyMax = dataArray[i];\n            }\n        }\n        let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n        if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n            lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + (lowFrequencyMax / (lowFrequencyAverage * 20)) + (lowFrequencyAverage / ultimatePeak)) % 255;\n        }\n        return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%,` + (lowFrequencySum / (lowFrequencyMax + 0.1)) + `)`;\n    }\n\n    let highFreqShiftingColorNumber = 0;\n    function getHighFrequencyColor(dataArray) {\n        let highFrequencySum = 0;\n        let highFrequencyMax = 0;\n        for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n            highFrequencySum += dataArray[i];\n            if (dataArray[i] > highFrequencyMax) {\n                highFrequencyMax = dataArray[i];\n            }\n        }\n        let highFrequencyAverage = highFrequencySum / (dataArray.length/ 2);\n        if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n            highFreqShiftingColorNumber = (highFreqShiftingColorNumber + (highFrequencyMax / (highFrequencyAverage * 200)) + (highFrequencyAverage / ultimatePeak)) % 255;\n        }\n        return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%,` + (highFrequencySum / (highFrequencyMax + 0.1)) + `)`;\n    }\n\n    function map(value, start1, stop1, start2, stop2) {\n        return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n    }\n    \n    drawVisualization();\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}