{"ast":null,"code":"var _jsxFileName = \"/Users/davidmash/Documents/davidmash.github.io/src/Components/AudioVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport VisibilitySensor from 'react-visibility-sensor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AudioVisualizer(props) {\n  _s();\n  const [audioElement, setAudioElement] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n  const canvasAreaRef = useRef(null);\n  const fileInputRef = useRef(null);\n  const frequencyRef = useRef(null);\n  const backgroundRef = useRef(null);\n  const scrubBarRef = useRef(null);\n  const [play, setPlay] = useState(false);\n  const [mouseOverBottom, setMouseOverBottom] = useState(false);\n  //const [isVisible, setIsVisible] = useState(true);\n\n  useEffect(() => {\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    const source = audioCtx.createMediaElementSource(audioElement);\n    const analyser = audioCtx.createAnalyser();\n    source.connect(analyser);\n    analyser.connect(audioCtx.destination);\n    const bufferLength = analyser.frequencyBinCount;\n    let dataArray = new Uint8Array(bufferLength);\n    function updateScrubBar() {\n      if (audioElement && scrubBarRef.current) {\n        let currentTime = audioElement.currentTime;\n        let duration = audioElement.duration;\n        let scrubBarValue = currentTime / duration * 100;\n        scrubBarRef.current.value = scrubBarValue;\n      }\n    }\n    audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n    audioElement.src = fileInputRef.current && fileInputRef.current.files[0] ? URL.createObjectURL(fileInputRef.current.files[0]) : process.env.PUBLIC_URL + '/music/song.mp3';\n    audioElement.addEventListener(\"loadeddata\", () => {\n      setLoaded(true);\n    });\n    audioElement.addEventListener(\"ended\", () => {\n      setPlay(false);\n    });\n    frequencyRef.current.willReadFrequently = true;\n    backgroundRef.current.willReadFrequently = true;\n    const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n    const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n    backgroundRef.current.style.width = '100%';\n    backgroundRef.current.style.height = '100%';\n    frequencyRef.current.style.width = '100%';\n    frequencyRef.current.style.height = '100%';\n    backgroundRef.current.width = canvasAreaRef.current.offsetWidth;\n    backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n    frequencyRef.current.width = canvasAreaRef.current.offsetWidth;\n    frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n    canvasAreaRef.current.addEventListener(\"resize\", () => {\n      backgroundRef.current.width = canvasAreaRef.current.offsetWidth;\n      backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n      frequencyRef.current.width = canvasAreaRef.current.offsetWidth;\n      frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n    });\n    let ultimatePeak = 1;\n    let rotationAngle = 0;\n    let rotateSmudge = false;\n    let smudgeVelocity = 0;\n\n    // Draw the frequency spectrum visualization\n    function drawVisualization() {\n      requestAnimationFrame(drawVisualization);\n      analyser.getByteFrequencyData(dataArray);\n\n      // draw current frame to main canvas\n      frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvas.height);\n      let avgAmplitude = 0;\n      let highFreqAvgAmplitude = 0;\n      let midFreqAvgAmplitude = 0;\n      let lowFreqAvgAmplitude = 0;\n      let lowFreqPeakAmplitude = 0;\n      if (dataArray && dataArray.length > 0) {\n        let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n        let highFrequencyColor = getHighFrequencyColor(dataArray);\n        gradient.addColorStop(0, highFrequencyColor);\n        gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n        gradient.addColorStop(1, highFrequencyColor);\n        frequencyCtx.fillStyle = gradient;\n        let verticalCenter = frequencyCtx.canvas.height / 2;\n        let zeroAdjust = 0;\n        for (let i = dataArray.length - 1; i >= 0; i--) {\n          if (dataArray[i] - 20 > 0) break;\n          zeroAdjust++;\n        }\n        let barWidth = frequencyCtx.canvas.width / dataArray.length / 2;\n        let x = 0;\n        let x2 = frequencyCtx.canvas.width;\n        for (let i = 0; i < dataArray.length - zeroAdjust; i++) {\n          drawVisualizationBar(i, barWidth, x, verticalCenter);\n          drawVisualizationBar(i, barWidth, x2, verticalCenter);\n          x += frequencyCtx.canvas.width / (dataArray.length - zeroAdjust) / 2;\n          x2 -= frequencyCtx.canvas.width / (dataArray.length - zeroAdjust) / 2;\n        }\n        avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n        highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n        midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n        lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n        lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n        frequencyCtx.globalAlpha = (Math.abs(0.2 - avgAmplitude / 200) + 0.1) / 2;\n      }\n\n      //smudge effect\n      rotateSmudge = rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8 || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n      if (rotateSmudge) {\n        smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n        rotationAngle = (rotationAngle + 1) % 360;\n        smudgeVelocity = lowFreqAvgAmplitude / 5 * (midFreqAvgAmplitude < highFreqAvgAmplitude * 2) ? -1 : 1;\n        // Save the current canvas state\n        smudgeCtx.save();\n        // Rotate the canvas\n        smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n        smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n        smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n        // Draw the smudged image on the canvas\n        smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n        // Restore the canvas state\n        smudgeCtx.restore();\n        smudgeCtx.globalAlpha = Math.abs(0.04 - avgAmplitude / 4000);\n      } else {\n        rotationAngle = 0;\n        var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n        var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n        smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n        smudgeCtx.globalAlpha = 0.5 - avgAmplitude / 100;\n        smudgeVelocity = avgAmplitude < 10 ? avgAmplitude * 2 : (lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.5 > midFreqAvgAmplitude + highFreqAvgAmplitude ? -1 : 1) * avgAmplitude / 4;\n        smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n        smudgeCtx.putImageData(imageDataBottom, 0, smudgeCtx.canvas.height / 2 + smudgeVelocity);\n        smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n      }\n    }\n    function getAverageAmplitude(data, startIndex, endIndex) {\n      startIndex = Math.trunc(startIndex);\n      endIndex = Math.min(Math.trunc(endIndex), data.length);\n      let sum = 0;\n      for (let i = startIndex; i < endIndex; i++) {\n        sum += data[i];\n      }\n      return sum / (endIndex - startIndex - 1);\n    }\n    function getPeakAmplitude(data, startIndex, endIndex) {\n      startIndex = Math.trunc(startIndex);\n      endIndex = Math.min(Math.trunc(endIndex), data.length);\n      let peak = 0;\n      for (let i = startIndex; i < endIndex; i++) {\n        peak = Math.max(peak, data[i]);\n      }\n      return peak;\n    }\n    function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n      if (dataArray[index] > ultimatePeak) {\n        ultimatePeak = dataArray[index];\n      }\n      //take the square of the data like this will amplify peaks\n      const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - index / dataArray.length)) * ((index + dataArray.length / 2) / dataArray.length);\n      let barHeight = adjustedData;\n      let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n      let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n      let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n      frequencyCtx.fillRect(x + offsetX, verticalCenter - barHeight / 4 + offsetY, barWidth + offsetWidth, barHeight / 2);\n    }\n    let lowFreqShiftingColorNumber = 0;\n    function getLowFrequencyColor(dataArray) {\n      let lowFrequencySum = 0;\n      let lowFrequencyMax = 0;\n      for (let i = 0; i < dataArray.length / 2; i++) {\n        lowFrequencySum += dataArray[i];\n        if (dataArray[i] > lowFrequencyMax) {\n          lowFrequencyMax = dataArray[i];\n        }\n      }\n      let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n      if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n        lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + lowFrequencyMax / (lowFrequencyAverage * 20) + lowFrequencyAverage / ultimatePeak) % 255;\n      }\n      return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%,` + lowFrequencySum / (lowFrequencyMax + 0.1) + `)`;\n    }\n    let highFreqShiftingColorNumber = 0;\n    function getHighFrequencyColor(dataArray) {\n      let highFrequencySum = 0;\n      let highFrequencyMax = 0;\n      for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n        highFrequencySum += dataArray[i];\n        if (dataArray[i] > highFrequencyMax) {\n          highFrequencyMax = dataArray[i];\n        }\n      }\n      let highFrequencyAverage = highFrequencySum / (dataArray.length / 2);\n      if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n        highFreqShiftingColorNumber = (highFreqShiftingColorNumber + highFrequencyMax / (highFrequencyAverage * 200) + highFrequencyAverage / ultimatePeak) % 255;\n      }\n      return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%,` + highFrequencySum / (highFrequencyMax + 0.1) + `)`;\n    }\n    function map(value, start1, stop1, start2, stop2) {\n      return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n    }\n    drawVisualization();\n    togglePlay(true);\n  }, [audioElement]);\n\n  // Initialize audio context and elements when the file input changes\n  function loadAudio() {\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n    }\n    setAudioElement(new Audio());\n  }\n  function updatePlayback() {\n    if (audioElement && scrubBarRef.current) {\n      let scrubBarValue = scrubBarRef.current.value;\n      let currentTime = scrubBarValue / 100 * audioElement.duration;\n      audioElement.currentTime = currentTime;\n    }\n  }\n  function togglePlay(given) {\n    if (audioElement) {\n      if (given !== undefined && given || audioElement.paused) {\n        audioElement.play();\n        setPlay(true);\n      } else {\n        audioElement.pause();\n        setPlay(false);\n      }\n    } else {\n      loadAudio();\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(VisibilitySensor, {\n    onChange: setIsVisible,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: props.style,\n      className: \"canvas-area no-select\",\n      ref: canvasAreaRef,\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"main-header\",\n          style: play ? {\n            opacity: 0,\n            transition: \"2s opacity\"\n          } : {\n            opacity: 0.8,\n            transition: \"3s opacity\"\n          },\n          children: \"David Mash\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-panel\",\n        onClick: togglePlay,\n        children: play ? /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"\",\n          src: process.env.PUBLIC_URL + '/images/pause-button.png',\n          className: \"pause-button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"\",\n          src: process.env.PUBLIC_URL + '/images/play-button.png',\n          className: \"play-button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: frequencyRef,\n        id: \"frequency\",\n        onClick: togglePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: backgroundRef,\n        id: \"background\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"\",\n        src: process.env.PUBLIC_URL + '/images/main_images/' + props.imageNumber + '.jpeg',\n        style: {\n          objectFit: \"cover\",\n          height: \"100%\",\n          minWidth: \"100%\",\n          width: \"auto\",\n          position: \"absolute\",\n          zIndex: \"-3\",\n          top: \"0px\",\n          left: \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom-controls\",\n        onMouseOver: () => {\n          if (!mouseOverBottom) setMouseOverBottom(true);\n        },\n        onMouseLeave: () => {\n          if (mouseOverBottom) setMouseOverBottom(false);\n        },\n        style: mouseOverBottom ? {\n          opacity: 0.7,\n          transition: \"opacity 300ms\"\n        } : play ? {\n          opacity: 0,\n          transition: \"opacity 300ms\"\n        } : {\n          opacity: 0.4,\n          transition: \"opacity 300ms\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: scrubBarRef,\n          className: \"scrub-bar\",\n          type: \"range\",\n          min: \"0\",\n          max: \"100\",\n          defaultValue: 0,\n          id: \"scrub-bar\",\n          disabled: !loaded,\n          onChange: () => {\n            updatePlayback();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 9\n  }, this);\n}\n_s(AudioVisualizer, \"fnOuns0ylvlJRM8NdvyLEaTBsbE=\");\n_c = AudioVisualizer;\nexport default AudioVisualizer;\nvar _c;\n$RefreshReg$(_c, \"AudioVisualizer\");","map":{"version":3,"names":["React","useRef","useState","useEffect","VisibilitySensor","AudioVisualizer","props","audioElement","setAudioElement","loaded","setLoaded","canvasAreaRef","fileInputRef","frequencyRef","backgroundRef","scrubBarRef","play","setPlay","mouseOverBottom","setMouseOverBottom","audioCtx","window","AudioContext","webkitAudioContext","source","createMediaElementSource","analyser","createAnalyser","connect","destination","bufferLength","frequencyBinCount","dataArray","Uint8Array","updateScrubBar","current","currentTime","duration","scrubBarValue","value","addEventListener","src","files","URL","createObjectURL","process","env","PUBLIC_URL","willReadFrequently","frequencyCtx","getContext","smudgeCtx","style","width","height","offsetWidth","offsetHeight","ultimatePeak","rotationAngle","rotateSmudge","smudgeVelocity","drawVisualization","requestAnimationFrame","getByteFrequencyData","clearRect","canvas","avgAmplitude","highFreqAvgAmplitude","midFreqAvgAmplitude","lowFreqAvgAmplitude","lowFreqPeakAmplitude","length","gradient","createLinearGradient","highFrequencyColor","getHighFrequencyColor","addColorStop","getLowFrequencyColor","fillStyle","verticalCenter","zeroAdjust","i","barWidth","x","x2","drawVisualizationBar","getAverageAmplitude","getPeakAmplitude","globalAlpha","Math","abs","drawImage","save","translate","rotate","PI","restore","imageDataTop","getImageData","imageDataBottom","putImageData","data","startIndex","endIndex","trunc","min","sum","peak","max","index","adjustedData","pow","barHeight","offsetX","random","offsetY","fillRect","lowFreqShiftingColorNumber","lowFrequencySum","lowFrequencyMax","lowFrequencyAverage","map","highFreqShiftingColorNumber","highFrequencySum","highFrequencyMax","highFrequencyAverage","start1","stop1","start2","stop2","togglePlay","loadAudio","pause","Audio","updatePlayback","given","undefined","paused","setIsVisible","opacity","transition","imageNumber","objectFit","minWidth","position","zIndex","top","left"],"sources":["/Users/davidmash/Documents/davidmash.github.io/src/Components/AudioVisualizer.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport VisibilitySensor from 'react-visibility-sensor';\n\nfunction AudioVisualizer(props) {\n    const [audioElement, setAudioElement] = useState(null);\n    const [loaded, setLoaded] = useState(false);\n    const canvasAreaRef = useRef(null);\n    const fileInputRef = useRef(null);\n    const frequencyRef = useRef(null);\n    const backgroundRef = useRef(null);\n    const scrubBarRef = useRef(null);\n    const [play, setPlay] = useState(false);\n    const [mouseOverBottom, setMouseOverBottom] = useState(false);\n    //const [isVisible, setIsVisible] = useState(true);\n\n    useEffect(() => {\n        const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n        const source = audioCtx.createMediaElementSource(audioElement);\n        const analyser = audioCtx.createAnalyser();\n        source.connect(analyser);\n        analyser.connect(audioCtx.destination);\n        const bufferLength = analyser.frequencyBinCount;\n        let dataArray = new Uint8Array(bufferLength);\n        function updateScrubBar() {\n            if(audioElement && scrubBarRef.current) {\n                let currentTime = audioElement.currentTime;\n                let duration = audioElement.duration;\n                let scrubBarValue = (currentTime/duration) * 100;\n                scrubBarRef.current.value = scrubBarValue;\n            }\n        }\n\n        audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n        audioElement.src = (fileInputRef.current && fileInputRef.current.files[0])? URL.createObjectURL(fileInputRef.current.files[0]): process.env.PUBLIC_URL + '/music/song.mp3';\n        audioElement.addEventListener(\"loadeddata\", () => {\n            setLoaded(true);\n        });\n        audioElement.addEventListener(\"ended\", () => {\n            setPlay(false);\n        });\n\n        frequencyRef.current.willReadFrequently = true;\n        backgroundRef.current.willReadFrequently = true;\n        const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n        const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n        backgroundRef.current.style.width ='100%';\n        backgroundRef.current.style.height='100%';\n        frequencyRef.current.style.width ='100%';\n        frequencyRef.current.style.height='100%';\n        backgroundRef.current.width  = canvasAreaRef.current.offsetWidth;\n        backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n        frequencyRef.current.width  = canvasAreaRef.current.offsetWidth;\n        frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n\n        canvasAreaRef.current.addEventListener(\"resize\", () => {\n            backgroundRef.current.width  = canvasAreaRef.current.offsetWidth;\n            backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n            frequencyRef.current.width  = canvasAreaRef.current.offsetWidth;\n            frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n        });\n\n        let ultimatePeak = 1;\n        let rotationAngle = 0;\n        let rotateSmudge = false;\n        let smudgeVelocity = 0;\n\n        // Draw the frequency spectrum visualization\n        function drawVisualization() {\n            requestAnimationFrame(drawVisualization);\n            analyser.getByteFrequencyData(dataArray);\n            \n            // draw current frame to main canvas\n            frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvas.height);\n    \n            let avgAmplitude = 0;\n            let highFreqAvgAmplitude = 0;\n            let midFreqAvgAmplitude = 0;\n            let lowFreqAvgAmplitude = 0;\n            let lowFreqPeakAmplitude = 0;\n            if (dataArray && dataArray.length > 0) {\n                let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n                let highFrequencyColor = getHighFrequencyColor(dataArray);\n                gradient.addColorStop(0, highFrequencyColor);\n                gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n                gradient.addColorStop(1, highFrequencyColor);\n                frequencyCtx.fillStyle = gradient;\n                let verticalCenter = frequencyCtx.canvas.height / 2;\n                let zeroAdjust = 0;\n                for (let i = dataArray.length - 1; i >= 0; i--) {\n                    if (dataArray[i] - 20 > 0) break;\n                    zeroAdjust++;\n                }\n                let barWidth = ((frequencyCtx.canvas.width / dataArray.length)) / 2;\n                let x = 0;\n                let x2 = frequencyCtx.canvas.width;\n                for (let i = 0; i < dataArray.length - zeroAdjust; i++) {\n                    drawVisualizationBar(i, barWidth, x, verticalCenter);\n                    drawVisualizationBar(i, barWidth, x2, verticalCenter);\n                    x += (frequencyCtx.canvas.width / (dataArray.length - zeroAdjust)) / 2;\n                    x2 -= (frequencyCtx.canvas.width / (dataArray.length - zeroAdjust)) / 2;\n                }\n                avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n                highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n                midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n                lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n                lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n                frequencyCtx.globalAlpha = (Math.abs(0.2 - (avgAmplitude / 200)) + 0.1) / 2;\n            }\n\n            //smudge effect\n            rotateSmudge = (rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8) || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n            if (rotateSmudge) {\n                smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n                rotationAngle = (rotationAngle + 1) % 360;\n                smudgeVelocity = (lowFreqAvgAmplitude) / 5 * (midFreqAvgAmplitude < highFreqAvgAmplitude * 2)? -1: 1;\n                // Save the current canvas state\n                smudgeCtx.save();\n                // Rotate the canvas\n                smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n                smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n                smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n                // Draw the smudged image on the canvas\n                smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n                // Restore the canvas state\n                smudgeCtx.restore();\n                smudgeCtx.globalAlpha = Math.abs(0.04 - (avgAmplitude / 4000));\n            } else {\n                rotationAngle = 0;\n                var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n                var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n                smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n                smudgeCtx.globalAlpha = 0.5 - (avgAmplitude / 100);\n                smudgeVelocity = (avgAmplitude < 10)? avgAmplitude * 2: ((lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.5 > midFreqAvgAmplitude + highFreqAvgAmplitude)? -1: 1) * avgAmplitude / 4;\n                smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n                smudgeCtx.putImageData(imageDataBottom, 0, (smudgeCtx.canvas.height / 2) + smudgeVelocity);\n                smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n            }\n        }\n    \n        function getAverageAmplitude(data, startIndex, endIndex) {\n            startIndex = Math.trunc(startIndex);\n            endIndex = Math.min(Math.trunc(endIndex), data.length);\n            let sum = 0;\n            for (let i = startIndex; i < endIndex; i++) {\n                sum += data[i];\n            }\n            return sum / (endIndex - startIndex - 1);\n        }\n    \n        function getPeakAmplitude(data, startIndex, endIndex) {\n            startIndex = Math.trunc(startIndex);\n            endIndex = Math.min(Math.trunc(endIndex), data.length);\n            let peak = 0;\n            for (let i = startIndex; i < endIndex; i++) {\n                peak = Math.max(peak, data[i]);\n            }\n            return peak;\n        }\n    \n        function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n            if (dataArray[index] > ultimatePeak) {\n                ultimatePeak = dataArray[index];\n            }\n            //take the square of the data like this will amplify peaks\n            const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - (index / dataArray.length))) * ((index + (dataArray.length / 2)) / dataArray.length);\n            let barHeight = adjustedData;\n            let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n            let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n            let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n            frequencyCtx.fillRect(x + offsetX, verticalCenter - (barHeight / 4) + offsetY, barWidth + offsetWidth, barHeight / 2);\n        }\n    \n        let lowFreqShiftingColorNumber = 0;\n        function getLowFrequencyColor(dataArray) {\n            let lowFrequencySum = 0;\n            let lowFrequencyMax = 0;\n            for (let i = 0; i < dataArray.length / 2; i++) {\n                lowFrequencySum += dataArray[i];\n                if (dataArray[i] > lowFrequencyMax) {\n                    lowFrequencyMax = dataArray[i];\n                }\n            }\n            let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n            if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n                lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + (lowFrequencyMax / (lowFrequencyAverage * 20)) + (lowFrequencyAverage / ultimatePeak)) % 255;\n            }\n            return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%,` + (lowFrequencySum / (lowFrequencyMax + 0.1)) + `)`;\n        }\n    \n        let highFreqShiftingColorNumber = 0;\n        function getHighFrequencyColor(dataArray) {\n            let highFrequencySum = 0;\n            let highFrequencyMax = 0;\n            for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n                highFrequencySum += dataArray[i];\n                if (dataArray[i] > highFrequencyMax) {\n                    highFrequencyMax = dataArray[i];\n                }\n            }\n            let highFrequencyAverage = highFrequencySum / (dataArray.length/ 2);\n            if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n                highFreqShiftingColorNumber = (highFreqShiftingColorNumber + (highFrequencyMax / (highFrequencyAverage * 200)) + (highFrequencyAverage / ultimatePeak)) % 255;\n            }\n            return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%,` + (highFrequencySum / (highFrequencyMax + 0.1)) + `)`;\n        }\n    \n        function map(value, start1, stop1, start2, stop2) {\n            return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n        }\n\n        drawVisualization();\n        togglePlay(true);\n    }, [audioElement]);\n\n    // Initialize audio context and elements when the file input changes\n    function loadAudio() {\n        if (audioElement) {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n        }\n        setAudioElement(new Audio());\n    }\n\n    function updatePlayback() {\n        if(audioElement && scrubBarRef.current) {\n            let scrubBarValue = scrubBarRef.current.value;\n            let currentTime = (scrubBarValue / 100) * audioElement.duration;\n            audioElement.currentTime = currentTime;\n        }\n    }\n\n    function togglePlay(given) {\n        if (audioElement) {\n            if ((given !== undefined && given) || audioElement.paused) {\n                audioElement.play();\n                setPlay(true);\n            } else {\n                audioElement.pause();\n                setPlay(false);\n            }\n        } else {\n            loadAudio();\n        }\n    }\n\n    return (\n        <VisibilitySensor onChange={setIsVisible}>\n            <div style={props.style} className='canvas-area no-select' ref={canvasAreaRef}>\n                <br />\n                <br />\n                <div className=\"main-header-container\">\n                    <h2 className={\"main-header\"} style={play?{opacity: 0, transition: \"2s opacity\"}:{opacity: 0.8, transition: \"3s opacity\"}}>David Mash</h2>\n                </div>\n                <div className=\"control-panel\" onClick={togglePlay}>\n                    {play?\n                    <img alt={\"\"} src={process.env.PUBLIC_URL + '/images/pause-button.png'} className={\"pause-button\"} />\n                    :\n                    <img alt={\"\"} src={process.env.PUBLIC_URL + '/images/play-button.png'} className={\"play-button\"} />\n                    }\n                </div>\n                <br />\n                <canvas ref={frequencyRef} id=\"frequency\" onClick={togglePlay}/>\n                <canvas ref={backgroundRef} id=\"background\" />\n                <img alt={\"\"} src={process.env.PUBLIC_URL + '/images/main_images/' + props.imageNumber + '.jpeg'} style={{objectFit: \"cover\", height: \"100%\", minWidth: \"100%\", width: \"auto\", position: \"absolute\", zIndex: \"-3\", top: \"0px\", left: \"0px\"}}/>\n                <div\n                    className='bottom-controls'\n                    onMouseOver={() => {if (!mouseOverBottom) setMouseOverBottom(true);}}\n                    onMouseLeave={() => {if (mouseOverBottom) setMouseOverBottom(false);}}\n                    style={mouseOverBottom?{opacity: 0.7, transition: \"opacity 300ms\"}:play?{opacity: 0, transition: \"opacity 300ms\"}:{opacity: 0.4, transition: \"opacity 300ms\"}}\n                >\n                    <input\n                        ref={scrubBarRef}\n                        className=\"scrub-bar\"\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"100\"\n                        defaultValue={0}\n                        id=\"scrub-bar\"\n                        disabled={!loaded}\n                        onChange={() => {updatePlayback();}}\n                    />\n                    {/*<input className={\"file-input\"} type=\"file\" ref={fileInputRef} onChange={loadAudio} />*/}\n                </div>\n            </div>\n        </VisibilitySensor>\n    );\n}\n\nexport default AudioVisualizer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}