{"ast":null,"code":"var _jsxFileName = \"/Users/davidmash/Documents/portfolio/src/Components/AudioVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport VisibilitySensor from 'react-visibility-sensor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AudioVisualizer(props) {\n  _s();\n  const [audioElement, setAudioElement] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n  const canvasAreaRef = useRef(null);\n  const fileInputRef = useRef(null);\n  const frequencyRef = useRef(null);\n  const backgroundRef = useRef(null);\n  const scrubBarRef = useRef(null);\n  const [play, setPlay] = useState(false);\n  const [mouseOverBottom, setMouseOverBottom] = useState(false);\n  const [isVisible, setIsVisible] = useState(true);\n  const [dataArray, setDataArray] = useState([]);\n  const [analyser, setanalyser] = useState([]);\n  useEffect(() => {\n    if (audioElement) {\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const source = audioCtx.createMediaElementSource(audioElement);\n      const tempAnalyser = audioCtx.createAnalyser();\n      source.connect(tempAnalyser);\n      tempAnalyser.connect(audioCtx.destination);\n      const bufferLength = tempAnalyser.frequencyBinCount;\n      function updateScrubBar() {\n        if (audioElement && scrubBarRef.current) {\n          let currentTime = audioElement.currentTime;\n          let duration = audioElement.duration;\n          let scrubBarValue = currentTime / duration * 100;\n          scrubBarRef.current.value = scrubBarValue;\n        }\n      }\n      audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n      audioElement.src = fileInputRef.current && fileInputRef.current.files[0] ? URL.createObjectURL(fileInputRef.current.files[0]) : process.env.PUBLIC_URL + '/music/song.mp3';\n      audioElement.addEventListener(\"loadeddata\", () => {\n        setLoaded(true);\n        setDataArray(new Uint8Array(bufferLength));\n        setanalyser(tempAnalyser);\n      });\n      audioElement.addEventListener(\"ended\", () => {\n        setPlay(false);\n      });\n    }\n  }, [audioElement]);\n  useEffect(() => {\n    if (!dataArray || !analyser) return;\n    frequencyRef.current.willReadFrequently = true;\n    backgroundRef.current.willReadFrequently = true;\n    const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n    const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n    backgroundRef.current.style.width = '100%';\n    backgroundRef.current.style.height = '100%';\n    frequencyRef.current.style.width = '100%';\n    frequencyRef.current.style.height = '100%';\n    backgroundRef.current.width = canvasAreaRef.current.offsetWidth;\n    backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n    frequencyRef.current.width = canvasAreaRef.current.offsetWidth;\n    frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n    canvasAreaRef.current.addEventListener(\"resize\", () => {\n      backgroundRef.current.width = canvasAreaRef.current.offsetWidth;\n      backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n      frequencyRef.current.width = canvasAreaRef.current.offsetWidth;\n      frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n    });\n    let ultimatePeak = 1;\n    let rotationAngle = 0;\n    let rotateSmudge = false;\n    let smudgeVelocity = 0;\n    // Draw the frequency spectrum visualization\n    let animationId;\n    function drawVisualization() {\n      if (isVisible) {\n        animationId = requestAnimationFrame(drawVisualization);\n      }\n      analyser.getByteFrequencyData(dataArray);\n\n      // draw current frame to main canvas\n      frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvas.height);\n      let avgAmplitude = 0;\n      let highFreqAvgAmplitude = 0;\n      let midFreqAvgAmplitude = 0;\n      let lowFreqAvgAmplitude = 0;\n      let lowFreqPeakAmplitude = 0;\n      if (dataArray && dataArray.length > 0) {\n        let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n        let highFrequencyColor = getHighFrequencyColor(dataArray);\n        gradient.addColorStop(0, highFrequencyColor);\n        gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n        gradient.addColorStop(1, highFrequencyColor);\n        frequencyCtx.fillStyle = gradient;\n        let verticalCenter = frequencyCtx.canvas.height / 2;\n        let zeroAdjust = 0;\n        for (let i = dataArray.length - 1; i >= 0; i--) {\n          if (dataArray[i] - 20 > 0) break;\n          zeroAdjust++;\n        }\n        let barWidth = frequencyCtx.canvas.width / dataArray.length / 2;\n        let x = 0;\n        let x2 = frequencyCtx.canvas.width;\n        for (let i = 0; i < dataArray.length - zeroAdjust; i++) {\n          drawVisualizationBar(i, barWidth, x, verticalCenter);\n          drawVisualizationBar(i, barWidth, x2, verticalCenter);\n          x += frequencyCtx.canvas.width / (dataArray.length - zeroAdjust) / 2;\n          x2 -= frequencyCtx.canvas.width / (dataArray.length - zeroAdjust) / 2;\n        }\n        avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n        highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n        midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n        lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n        lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n        frequencyCtx.globalAlpha = (Math.abs(0.2 - avgAmplitude / 200) + 0.1) / 2;\n      }\n\n      //smudge effect\n      rotateSmudge = rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8 || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n      if (rotateSmudge) {\n        smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n        rotationAngle = (rotationAngle + 1) % 360;\n        smudgeVelocity = lowFreqAvgAmplitude / 5 * (midFreqAvgAmplitude < highFreqAvgAmplitude * 2) ? -1 : 1;\n        // Save the current canvas state\n        smudgeCtx.save();\n        // Rotate the canvas\n        smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n        smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n        smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n        // Draw the smudged image on the canvas\n        smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n        // Restore the canvas state\n        smudgeCtx.restore();\n        smudgeCtx.globalAlpha = Math.abs(0.04 - avgAmplitude / 4000);\n      } else {\n        rotationAngle = 0;\n        var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n        var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n        smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n        smudgeCtx.globalAlpha = 0.5 - avgAmplitude / 100;\n        smudgeVelocity = avgAmplitude < 10 ? avgAmplitude * 2 : (lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.5 > midFreqAvgAmplitude + highFreqAvgAmplitude ? -1 : 1) * avgAmplitude / 4;\n        smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n        smudgeCtx.putImageData(imageDataBottom, 0, smudgeCtx.canvas.height / 2 + smudgeVelocity);\n        smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n      }\n    }\n    function getAverageAmplitude(data, startIndex, endIndex) {\n      startIndex = Math.trunc(startIndex);\n      endIndex = Math.min(Math.trunc(endIndex), data.length);\n      let sum = 0;\n      for (let i = startIndex; i < endIndex; i++) {\n        sum += data[i];\n      }\n      return sum / (endIndex - startIndex - 1);\n    }\n    function getPeakAmplitude(data, startIndex, endIndex) {\n      startIndex = Math.trunc(startIndex);\n      endIndex = Math.min(Math.trunc(endIndex), data.length);\n      let peak = 0;\n      for (let i = startIndex; i < endIndex; i++) {\n        peak = Math.max(peak, data[i]);\n      }\n      return peak;\n    }\n    function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n      if (dataArray[index] > ultimatePeak) {\n        ultimatePeak = dataArray[index];\n      }\n      //take the square of the data like this will amplify peaks\n      const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - index / dataArray.length)) * ((index + dataArray.length / 2) / dataArray.length);\n      let barHeight = adjustedData;\n      let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n      let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n      let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n      frequencyCtx.fillRect(x + offsetX, verticalCenter - barHeight / 4 + offsetY, barWidth + offsetWidth, barHeight / 2);\n    }\n    let lowFreqShiftingColorNumber = 0;\n    function getLowFrequencyColor(dataArray) {\n      let lowFrequencySum = 0;\n      let lowFrequencyMax = 0;\n      for (let i = 0; i < dataArray.length / 2; i++) {\n        lowFrequencySum += dataArray[i];\n        if (dataArray[i] > lowFrequencyMax) {\n          lowFrequencyMax = dataArray[i];\n        }\n      }\n      let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n      if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n        lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + lowFrequencyMax / (lowFrequencyAverage * 20) + lowFrequencyAverage / ultimatePeak) % 255;\n      }\n      return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%,` + lowFrequencySum / (lowFrequencyMax + 0.1) + `)`;\n    }\n    let highFreqShiftingColorNumber = 0;\n    function getHighFrequencyColor(dataArray) {\n      let highFrequencySum = 0;\n      let highFrequencyMax = 0;\n      for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n        highFrequencySum += dataArray[i];\n        if (dataArray[i] > highFrequencyMax) {\n          highFrequencyMax = dataArray[i];\n        }\n      }\n      let highFrequencyAverage = highFrequencySum / (dataArray.length / 2);\n      if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n        highFreqShiftingColorNumber = (highFreqShiftingColorNumber + highFrequencyMax / (highFrequencyAverage * 200) + highFrequencyAverage / ultimatePeak) % 255;\n      }\n      return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%,` + highFrequencySum / (highFrequencyMax + 0.1) + `)`;\n    }\n    function map(value, start1, stop1, start2, stop2) {\n      return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n    }\n    drawVisualization();\n    return () => cancelAnimationFrame(animationId);\n  }, [isVisible, analyser]);\n\n  // Initialize audio context and elements when the file input changes\n  function loadAudio() {\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n    }\n    setAudioElement(new Audio());\n  }\n  function updatePlayback() {\n    if (audioElement && scrubBarRef.current) {\n      let scrubBarValue = scrubBarRef.current.value;\n      let currentTime = scrubBarValue / 100 * audioElement.duration;\n      audioElement.currentTime = currentTime;\n    }\n  }\n  function togglePlay() {\n    if (audioElement) {\n      if (audioElement.paused) {\n        audioElement.play();\n        setPlay(true);\n      } else {\n        audioElement.pause();\n        setPlay(false);\n      }\n    }\n  }\n  if (!audioElement) {\n    loadAudio();\n  }\n  return /*#__PURE__*/_jsxDEV(VisibilitySensor, {\n    onChange: setIsVisible,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: props.style,\n      className: \"canvas-area no-select\",\n      ref: canvasAreaRef,\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"main-header\",\n          style: play ? {\n            opacity: 0,\n            transition: \"2s opacity\"\n          } : {\n            opacity: 0.8,\n            transition: \"3s opacity\"\n          },\n          children: \"David Mash\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this), loaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-panel\",\n        onClick: togglePlay,\n        children: play ? /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"\",\n          src: process.env.PUBLIC_URL + '/images/pause-button.png',\n          className: \"pause-button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"\",\n          src: process.env.PUBLIC_URL + '/images/play-button.png',\n          className: \"play-button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: frequencyRef,\n        id: \"frequency\",\n        onClick: togglePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: backgroundRef,\n        id: \"background\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"\",\n        src: process.env.PUBLIC_URL + '/images/main_images/' + props.imageNumber + '.jpeg',\n        style: {\n          objectFit: \"cover\",\n          height: \"100%\",\n          minWidth: \"100%\",\n          width: \"auto\",\n          position: \"absolute\",\n          zIndex: \"-3\",\n          top: \"0px\",\n          left: \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom-controls\",\n        onMouseOver: () => {\n          if (!mouseOverBottom) setMouseOverBottom(true);\n        },\n        onMouseLeave: () => {\n          if (mouseOverBottom) setMouseOverBottom(false);\n        },\n        style: mouseOverBottom ? {\n          opacity: 0.7,\n          transition: \"opacity 300ms\"\n        } : play ? {\n          opacity: 0,\n          transition: \"opacity 300ms\"\n        } : {\n          opacity: 0.4,\n          transition: \"opacity 300ms\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: scrubBarRef,\n          className: \"scrub-bar\",\n          type: \"range\",\n          min: \"0\",\n          max: \"100\",\n          defaultValue: 0,\n          id: \"scrub-bar\",\n          disabled: !loaded,\n          onChange: () => {\n            updatePlayback();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 9\n  }, this);\n}\n_s(AudioVisualizer, \"/WqrC1YPW6cx6SoCh80od69CQpI=\");\n_c = AudioVisualizer;\nexport default AudioVisualizer;\nvar _c;\n$RefreshReg$(_c, \"AudioVisualizer\");","map":{"version":3,"names":["React","useRef","useState","useEffect","VisibilitySensor","AudioVisualizer","props","audioElement","setAudioElement","loaded","setLoaded","canvasAreaRef","fileInputRef","frequencyRef","backgroundRef","scrubBarRef","play","setPlay","mouseOverBottom","setMouseOverBottom","isVisible","setIsVisible","dataArray","setDataArray","analyser","setanalyser","audioCtx","window","AudioContext","webkitAudioContext","source","createMediaElementSource","tempAnalyser","createAnalyser","connect","destination","bufferLength","frequencyBinCount","updateScrubBar","current","currentTime","duration","scrubBarValue","value","addEventListener","src","files","URL","createObjectURL","process","env","PUBLIC_URL","Uint8Array","willReadFrequently","frequencyCtx","getContext","smudgeCtx","style","width","height","offsetWidth","offsetHeight","ultimatePeak","rotationAngle","rotateSmudge","smudgeVelocity","animationId","drawVisualization","requestAnimationFrame","getByteFrequencyData","clearRect","canvas","avgAmplitude","highFreqAvgAmplitude","midFreqAvgAmplitude","lowFreqAvgAmplitude","lowFreqPeakAmplitude","length","gradient","createLinearGradient","highFrequencyColor","getHighFrequencyColor","addColorStop","getLowFrequencyColor","fillStyle","verticalCenter","zeroAdjust","i","barWidth","x","x2","drawVisualizationBar","getAverageAmplitude","getPeakAmplitude","globalAlpha","Math","abs","drawImage","save","translate","rotate","PI","restore","imageDataTop","getImageData","imageDataBottom","putImageData","data","startIndex","endIndex","trunc","min","sum","peak","max","index","adjustedData","pow","barHeight","offsetX","random","offsetY","fillRect","lowFreqShiftingColorNumber","lowFrequencySum","lowFrequencyMax","lowFrequencyAverage","map","highFreqShiftingColorNumber","highFrequencySum","highFrequencyMax","highFrequencyAverage","start1","stop1","start2","stop2","cancelAnimationFrame","loadAudio","pause","Audio","updatePlayback","togglePlay","paused","opacity","transition","imageNumber","objectFit","minWidth","position","zIndex","top","left"],"sources":["/Users/davidmash/Documents/portfolio/src/Components/AudioVisualizer.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport VisibilitySensor from 'react-visibility-sensor';\n\nfunction AudioVisualizer(props) {\n    const [audioElement, setAudioElement] = useState(null);\n    const [loaded, setLoaded] = useState(false);\n    const canvasAreaRef = useRef(null);\n    const fileInputRef = useRef(null);\n    const frequencyRef = useRef(null);\n    const backgroundRef = useRef(null);\n    const scrubBarRef = useRef(null);\n    const [play, setPlay] = useState(false);\n    const [mouseOverBottom, setMouseOverBottom] = useState(false);\n    const [isVisible, setIsVisible] = useState(true);\n    const [dataArray, setDataArray] = useState([]);\n    const [analyser, setanalyser] = useState([]);\n\n    useEffect(() => {\n        if (audioElement) {\n            const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n            const source = audioCtx.createMediaElementSource(audioElement);\n            const tempAnalyser = audioCtx.createAnalyser();\n            source.connect(tempAnalyser);\n            tempAnalyser.connect(audioCtx.destination);\n            const bufferLength = tempAnalyser.frequencyBinCount;\n\n            function updateScrubBar() {\n                if(audioElement && scrubBarRef.current) {\n                    let currentTime = audioElement.currentTime;\n                    let duration = audioElement.duration;\n                    let scrubBarValue = (currentTime/duration) * 100;\n                    scrubBarRef.current.value = scrubBarValue;\n                }\n            }\n\n            audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n            audioElement.src = (fileInputRef.current && fileInputRef.current.files[0])? URL.createObjectURL(fileInputRef.current.files[0]): process.env.PUBLIC_URL + '/music/song.mp3';\n            audioElement.addEventListener(\"loadeddata\", () => {\n                setLoaded(true);\n                setDataArray(new Uint8Array(bufferLength));\n                setanalyser(tempAnalyser);\n            });\n            audioElement.addEventListener(\"ended\", () => {\n                setPlay(false);\n            });\n        }\n    }, [audioElement]);\n\n    useEffect(() => {\n        if (!dataArray || !analyser) return;\n        frequencyRef.current.willReadFrequently = true;\n        backgroundRef.current.willReadFrequently = true;\n        const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n        const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n        backgroundRef.current.style.width ='100%';\n        backgroundRef.current.style.height='100%';\n        frequencyRef.current.style.width ='100%';\n        frequencyRef.current.style.height='100%';\n        backgroundRef.current.width  = canvasAreaRef.current.offsetWidth;\n        backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n        frequencyRef.current.width  = canvasAreaRef.current.offsetWidth;\n        frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n\n        canvasAreaRef.current.addEventListener(\"resize\", () => {\n            backgroundRef.current.width  = canvasAreaRef.current.offsetWidth;\n            backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n            frequencyRef.current.width  = canvasAreaRef.current.offsetWidth;\n            frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n        });\n\n        let ultimatePeak = 1;\n        let rotationAngle = 0;\n        let rotateSmudge = false;\n        let smudgeVelocity = 0;\n        // Draw the frequency spectrum visualization\n        let animationId;\n        function drawVisualization() {\n            if(isVisible) {\n                animationId = requestAnimationFrame(drawVisualization);\n            }\n            analyser.getByteFrequencyData(dataArray);\n            \n            // draw current frame to main canvas\n            frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvas.height);\n    \n            let avgAmplitude = 0;\n            let highFreqAvgAmplitude = 0;\n            let midFreqAvgAmplitude = 0;\n            let lowFreqAvgAmplitude = 0;\n            let lowFreqPeakAmplitude = 0;\n            if (dataArray && dataArray.length > 0) {\n                let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n                let highFrequencyColor = getHighFrequencyColor(dataArray);\n                gradient.addColorStop(0, highFrequencyColor);\n                gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n                gradient.addColorStop(1, highFrequencyColor);\n                frequencyCtx.fillStyle = gradient;\n                let verticalCenter = frequencyCtx.canvas.height / 2;\n                let zeroAdjust = 0;\n                for (let i = dataArray.length - 1; i >= 0; i--) {\n                    if (dataArray[i] - 20 > 0) break;\n                    zeroAdjust++;\n                }\n                let barWidth = ((frequencyCtx.canvas.width / dataArray.length)) / 2;\n                let x = 0;\n                let x2 = frequencyCtx.canvas.width;\n                for (let i = 0; i < dataArray.length - zeroAdjust; i++) {\n                    drawVisualizationBar(i, barWidth, x, verticalCenter);\n                    drawVisualizationBar(i, barWidth, x2, verticalCenter);\n                    x += (frequencyCtx.canvas.width / (dataArray.length - zeroAdjust)) / 2;\n                    x2 -= (frequencyCtx.canvas.width / (dataArray.length - zeroAdjust)) / 2;\n                }\n                avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n                highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n                midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n                lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n                lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n                frequencyCtx.globalAlpha = (Math.abs(0.2 - (avgAmplitude / 200)) + 0.1) / 2;\n            }\n\n            //smudge effect\n            rotateSmudge = (rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8) || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n            if (rotateSmudge) {\n                smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n                rotationAngle = (rotationAngle + 1) % 360;\n                smudgeVelocity = (lowFreqAvgAmplitude) / 5 * (midFreqAvgAmplitude < highFreqAvgAmplitude * 2)? -1: 1;\n                // Save the current canvas state\n                smudgeCtx.save();\n                // Rotate the canvas\n                smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n                smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n                smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n                // Draw the smudged image on the canvas\n                smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n                // Restore the canvas state\n                smudgeCtx.restore();\n                smudgeCtx.globalAlpha = Math.abs(0.04 - (avgAmplitude / 4000));\n            } else {\n                rotationAngle = 0;\n                var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n                var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n                smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n                smudgeCtx.globalAlpha = 0.5 - (avgAmplitude / 100);\n                smudgeVelocity = (avgAmplitude < 10)? avgAmplitude * 2: ((lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.5 > midFreqAvgAmplitude + highFreqAvgAmplitude)? -1: 1) * avgAmplitude / 4;\n                smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n                smudgeCtx.putImageData(imageDataBottom, 0, (smudgeCtx.canvas.height / 2) + smudgeVelocity);\n                smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n            }\n        }\n    \n        function getAverageAmplitude(data, startIndex, endIndex) {\n            startIndex = Math.trunc(startIndex);\n            endIndex = Math.min(Math.trunc(endIndex), data.length);\n            let sum = 0;\n            for (let i = startIndex; i < endIndex; i++) {\n                sum += data[i];\n            }\n            return sum / (endIndex - startIndex - 1);\n        }\n    \n        function getPeakAmplitude(data, startIndex, endIndex) {\n            startIndex = Math.trunc(startIndex);\n            endIndex = Math.min(Math.trunc(endIndex), data.length);\n            let peak = 0;\n            for (let i = startIndex; i < endIndex; i++) {\n                peak = Math.max(peak, data[i]);\n            }\n            return peak;\n        }\n    \n        function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n            if (dataArray[index] > ultimatePeak) {\n                ultimatePeak = dataArray[index];\n            }\n            //take the square of the data like this will amplify peaks\n            const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - (index / dataArray.length))) * ((index + (dataArray.length / 2)) / dataArray.length);\n            let barHeight = adjustedData;\n            let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n            let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n            let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n            frequencyCtx.fillRect(x + offsetX, verticalCenter - (barHeight / 4) + offsetY, barWidth + offsetWidth, barHeight / 2);\n        }\n    \n        let lowFreqShiftingColorNumber = 0;\n        function getLowFrequencyColor(dataArray) {\n            let lowFrequencySum = 0;\n            let lowFrequencyMax = 0;\n            for (let i = 0; i < dataArray.length / 2; i++) {\n                lowFrequencySum += dataArray[i];\n                if (dataArray[i] > lowFrequencyMax) {\n                    lowFrequencyMax = dataArray[i];\n                }\n            }\n            let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n            if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n                lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + (lowFrequencyMax / (lowFrequencyAverage * 20)) + (lowFrequencyAverage / ultimatePeak)) % 255;\n            }\n            return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%,` + (lowFrequencySum / (lowFrequencyMax + 0.1)) + `)`;\n        }\n    \n        let highFreqShiftingColorNumber = 0;\n        function getHighFrequencyColor(dataArray) {\n            let highFrequencySum = 0;\n            let highFrequencyMax = 0;\n            for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n                highFrequencySum += dataArray[i];\n                if (dataArray[i] > highFrequencyMax) {\n                    highFrequencyMax = dataArray[i];\n                }\n            }\n            let highFrequencyAverage = highFrequencySum / (dataArray.length/ 2);\n            if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n                highFreqShiftingColorNumber = (highFreqShiftingColorNumber + (highFrequencyMax / (highFrequencyAverage * 200)) + (highFrequencyAverage / ultimatePeak)) % 255;\n            }\n            return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%,` + (highFrequencySum / (highFrequencyMax + 0.1)) + `)`;\n        }\n    \n        function map(value, start1, stop1, start2, stop2) {\n            return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n        }\n\n        drawVisualization();\n        return () => cancelAnimationFrame(animationId);\n    }, [isVisible, analyser]);\n\n    // Initialize audio context and elements when the file input changes\n    function loadAudio() {\n        if (audioElement) {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n        }\n        setAudioElement(new Audio());\n    }\n\n    function updatePlayback() {\n        if(audioElement && scrubBarRef.current) {\n            let scrubBarValue = scrubBarRef.current.value;\n            let currentTime = (scrubBarValue / 100) * audioElement.duration;\n            audioElement.currentTime = currentTime;\n        }\n    }\n\n    function togglePlay() {\n        if (audioElement) {\n            if (audioElement.paused) {\n                audioElement.play();\n                setPlay(true);\n            } else {\n                audioElement.pause();\n                setPlay(false);\n            }\n        }\n    }\n\n    if (!audioElement) {\n        loadAudio();\n    }\n\n    return (\n        <VisibilitySensor onChange={setIsVisible}>\n            <div style={props.style} className='canvas-area no-select' ref={canvasAreaRef}>\n                <br />\n                <br />\n                <div className=\"main-header-container\">\n                    <h2 className={\"main-header\"} style={play?{opacity: 0, transition: \"2s opacity\"}:{opacity: 0.8, transition: \"3s opacity\"}}>David Mash</h2>\n                </div>\n                {loaded?\n                <div className=\"control-panel\" onClick={togglePlay}>\n                    {play?\n                    <img alt={\"\"} src={process.env.PUBLIC_URL + '/images/pause-button.png'} className={\"pause-button\"} />\n                    :\n                    <img alt={\"\"} src={process.env.PUBLIC_URL + '/images/play-button.png'} className={\"play-button\"} />\n                    }\n                </div>\n                :\n                <></>\n                }\n                <br />\n                <canvas ref={frequencyRef} id=\"frequency\" onClick={togglePlay}/>\n                <canvas ref={backgroundRef} id=\"background\" />\n                <img alt={\"\"} src={process.env.PUBLIC_URL + '/images/main_images/' + props.imageNumber + '.jpeg'} style={{objectFit: \"cover\", height: \"100%\", minWidth: \"100%\", width: \"auto\", position: \"absolute\", zIndex: \"-3\", top: \"0px\", left: \"0px\"}}/>\n                <div\n                    className='bottom-controls'\n                    onMouseOver={() => {if (!mouseOverBottom) setMouseOverBottom(true);}}\n                    onMouseLeave={() => {if (mouseOverBottom) setMouseOverBottom(false);}}\n                    style={mouseOverBottom?{opacity: 0.7, transition: \"opacity 300ms\"}:play?{opacity: 0, transition: \"opacity 300ms\"}:{opacity: 0.4, transition: \"opacity 300ms\"}}\n                >\n                    <input\n                        ref={scrubBarRef}\n                        className=\"scrub-bar\"\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"100\"\n                        defaultValue={0}\n                        id=\"scrub-bar\"\n                        disabled={!loaded}\n                        onChange={() => {updatePlayback();}}\n                    />\n                    {/*<input className={\"file-input\"} type=\"file\" ref={fileInputRef} onChange={loadAudio} />*/}\n                </div>\n            </div>\n        </VisibilitySensor>\n    );\n}\n\nexport default AudioVisualizer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}