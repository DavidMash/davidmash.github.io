{"ast":null,"code":"var _jsxFileName = \"/Users/davidmash/Documents/davidmash.github.io/src/Components/AudioVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport VisibilitySensor from 'react-visibility-sensor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AudioVisualizer(props) {\n  _s();\n  const [audioElement, setAudioElement] = useState(null);\n  const [analyser, setAnalyser] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n  const canvasAreaRef = useRef(null);\n  const fileInputRef = useRef(null);\n  const frequencyRef = useRef(null);\n  const backgroundRef = useRef(null);\n  const scrubBarRef = useRef(null);\n  const [play, setPlay] = useState(false);\n  const [mouseOverBottom, setMouseOverBottom] = useState(false);\n  const [isVisible, setIsVisible] = useState(true);\n  useEffect(() => {\n    if (analyser) {\n      const bufferLength = analyser.frequencyBinCount;\n      let dataArray = new Uint8Array(bufferLength);\n      frequencyRef.current.willReadFrequently = true;\n      backgroundRef.current.willReadFrequently = true;\n      const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n      const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n      backgroundRef.current.style.width = '100%';\n      backgroundRef.current.style.height = '100%';\n      frequencyRef.current.style.width = '100%';\n      frequencyRef.current.style.height = '100%';\n      backgroundRef.current.width = canvasAreaRef.current.offsetWidth;\n      backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n      frequencyRef.current.width = canvasAreaRef.current.offsetWidth;\n      frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n      canvasAreaRef.current.addEventListener(\"resize\", () => {\n        backgroundRef.current.width = canvasAreaRef.current.offsetWidth;\n        backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n        frequencyRef.current.width = canvasAreaRef.current.offsetWidth;\n        frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n      });\n      let ultimatePeak = 1;\n      let rotationAngle = 0;\n      let rotateSmudge = false;\n      let smudgeVelocity = 0;\n\n      // Draw the frequency spectrum visualization\n      function drawVisualization() {\n        requestAnimationFrame(drawVisualization);\n        analyser.getByteFrequencyData(dataArray);\n\n        // draw current frame to main canvas\n        frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvas.height);\n        let avgAmplitude = 0;\n        let highFreqAvgAmplitude = 0;\n        let midFreqAvgAmplitude = 0;\n        let lowFreqAvgAmplitude = 0;\n        let lowFreqPeakAmplitude = 0;\n        if (dataArray && dataArray.length > 0) {\n          let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n          let highFrequencyColor = getHighFrequencyColor(dataArray);\n          gradient.addColorStop(0, highFrequencyColor);\n          gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n          gradient.addColorStop(1, highFrequencyColor);\n          frequencyCtx.fillStyle = gradient;\n          let verticalCenter = frequencyCtx.canvas.height / 2;\n          let zeroAdjust = 0;\n          for (let i = dataArray.length - 1; i >= 0; i--) {\n            if (dataArray[i] - 20 > 0) break;\n            zeroAdjust++;\n          }\n          let barWidth = frequencyCtx.canvas.width / dataArray.length / 2;\n          let x = 0;\n          let x2 = frequencyCtx.canvas.width;\n          for (let i = 0; i < dataArray.length - zeroAdjust; i++) {\n            drawVisualizationBar(i, barWidth, x, verticalCenter);\n            drawVisualizationBar(i, barWidth, x2, verticalCenter);\n            x += frequencyCtx.canvas.width / (dataArray.length - zeroAdjust) / 2;\n            x2 -= frequencyCtx.canvas.width / (dataArray.length - zeroAdjust) / 2;\n          }\n          avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n          highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n          midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n          lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n          lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n          frequencyCtx.globalAlpha = (Math.abs(0.2 - avgAmplitude / 200) + 0.1) / 2;\n        }\n\n        //smudge effect\n        rotateSmudge = rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8 || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n        if (rotateSmudge) {\n          smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n          rotationAngle = (rotationAngle + 1) % 360;\n          smudgeVelocity = lowFreqAvgAmplitude / 5 * (midFreqAvgAmplitude < highFreqAvgAmplitude * 2) ? -1 : 1;\n          // Save the current canvas state\n          smudgeCtx.save();\n          // Rotate the canvas\n          smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n          smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n          smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n          // Draw the smudged image on the canvas\n          smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n          // Restore the canvas state\n          smudgeCtx.restore();\n          smudgeCtx.globalAlpha = Math.abs(0.04 - avgAmplitude / 4000);\n        } else {\n          rotationAngle = 0;\n          var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n          var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n          smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n          smudgeCtx.globalAlpha = 0.5 - avgAmplitude / 100;\n          smudgeVelocity = avgAmplitude < 10 ? avgAmplitude * 2 : (lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.5 > midFreqAvgAmplitude + highFreqAvgAmplitude ? -1 : 1) * avgAmplitude / 4;\n          smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n          smudgeCtx.putImageData(imageDataBottom, 0, smudgeCtx.canvas.height / 2 + smudgeVelocity);\n          smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n        }\n      }\n      function getAverageAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let sum = 0;\n        for (let i = startIndex; i < endIndex; i++) {\n          sum += data[i];\n        }\n        return sum / (endIndex - startIndex - 1);\n      }\n      function getPeakAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let peak = 0;\n        for (let i = startIndex; i < endIndex; i++) {\n          peak = Math.max(peak, data[i]);\n        }\n        return peak;\n      }\n      function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n        if (dataArray[index] > ultimatePeak) {\n          ultimatePeak = dataArray[index];\n        }\n        //take the square of the data like this will amplify peaks\n        const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - index / dataArray.length)) * ((index + dataArray.length / 2) / dataArray.length);\n        let barHeight = adjustedData;\n        let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n        frequencyCtx.fillRect(x + offsetX, verticalCenter - barHeight / 4 + offsetY, barWidth + offsetWidth, barHeight / 2);\n      }\n      let lowFreqShiftingColorNumber = 0;\n      function getLowFrequencyColor(dataArray) {\n        let lowFrequencySum = 0;\n        let lowFrequencyMax = 0;\n        for (let i = 0; i < dataArray.length / 2; i++) {\n          lowFrequencySum += dataArray[i];\n          if (dataArray[i] > lowFrequencyMax) {\n            lowFrequencyMax = dataArray[i];\n          }\n        }\n        let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n        if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n          lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + lowFrequencyMax / (lowFrequencyAverage * 20) + lowFrequencyAverage / ultimatePeak) % 255;\n        }\n        return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%,` + lowFrequencySum / (lowFrequencyMax + 0.1) + `)`;\n      }\n      let highFreqShiftingColorNumber = 0;\n      function getHighFrequencyColor(dataArray) {\n        let highFrequencySum = 0;\n        let highFrequencyMax = 0;\n        for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n          highFrequencySum += dataArray[i];\n          if (dataArray[i] > highFrequencyMax) {\n            highFrequencyMax = dataArray[i];\n          }\n        }\n        let highFrequencyAverage = highFrequencySum / (dataArray.length / 2);\n        if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n          highFreqShiftingColorNumber = (highFreqShiftingColorNumber + highFrequencyMax / (highFrequencyAverage * 200) + highFrequencyAverage / ultimatePeak) % 255;\n        }\n        return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%,` + highFrequencySum / (highFrequencyMax + 0.1) + `)`;\n      }\n      function map(value, start1, stop1, start2, stop2) {\n        return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n      }\n      drawVisualization();\n    }\n  }, [analyser]);\n\n  // Initialize audio context and elements when the file input changes\n  function loadAudio() {\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n    }\n    setAudioElement(new Audio(), () => {\n      function updateScrubBar() {\n        if (audioElement && scrubBarRef.current) {\n          let currentTime = audioElement.currentTime;\n          let duration = audioElement.duration;\n          let scrubBarValue = currentTime / duration * 100;\n          scrubBarRef.current.value = scrubBarValue;\n        }\n      }\n      audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n      audioElement.src = fileInputRef.current && fileInputRef.current.files[0] ? URL.createObjectURL(fileInputRef.current.files[0]) : process.env.PUBLIC_URL + '/music/song.mp3';\n      audioElement.addEventListener(\"loadeddata\", () => {\n        setLoaded(true);\n      });\n      audioElement.addEventListener(\"ended\", () => {\n        setPlay(false);\n      });\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      setAnalyser(audioCtx.createAnalyser(), () => {\n        const source = audioCtx.createMediaElementSource(audioElement);\n        source.connect(analyser);\n        analyser.connect(audioCtx.destination);\n        togglePlay(true);\n      });\n    });\n  }\n  function updatePlayback() {\n    if (audioElement && scrubBarRef.current) {\n      let scrubBarValue = scrubBarRef.current.value;\n      let currentTime = scrubBarValue / 100 * audioElement.duration;\n      audioElement.currentTime = currentTime;\n    }\n  }\n  function togglePlay(given) {\n    if (audioElement) {\n      if (given === true || audioElement.paused) {\n        audioElement.play();\n        setPlay(true);\n      } else {\n        audioElement.pause();\n        setPlay(false);\n      }\n    } else {\n      loadAudio();\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(VisibilitySensor, {\n    onChange: setIsVisible,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: props.style,\n      className: \"canvas-area no-select\",\n      ref: canvasAreaRef,\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"main-header\",\n          style: play ? {\n            opacity: 0,\n            transition: \"2s opacity\"\n          } : {\n            opacity: 0.8,\n            transition: \"3s opacity\"\n          },\n          children: \"David Mash\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-panel\",\n        onClick: togglePlay,\n        children: play ? /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"\",\n          src: process.env.PUBLIC_URL + '/images/pause-button.png',\n          className: \"pause-button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"\",\n          src: process.env.PUBLIC_URL + '/images/play-button.png',\n          className: \"play-button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: frequencyRef,\n        id: \"frequency\",\n        onClick: togglePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: backgroundRef,\n        id: \"background\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"\",\n        src: process.env.PUBLIC_URL + '/images/main_images/' + props.imageNumber + '.jpeg',\n        style: {\n          objectFit: \"cover\",\n          height: \"100%\",\n          minWidth: \"100%\",\n          width: \"auto\",\n          position: \"absolute\",\n          zIndex: \"-3\",\n          top: \"0px\",\n          left: \"0px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom-controls\",\n        onMouseOver: () => {\n          if (!mouseOverBottom) setMouseOverBottom(true);\n        },\n        onMouseLeave: () => {\n          if (mouseOverBottom) setMouseOverBottom(false);\n        },\n        style: mouseOverBottom ? {\n          opacity: 0.7,\n          transition: \"opacity 300ms\"\n        } : play ? {\n          opacity: 0,\n          transition: \"opacity 300ms\"\n        } : {\n          opacity: 0.4,\n          transition: \"opacity 300ms\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: scrubBarRef,\n          className: \"scrub-bar\",\n          type: \"range\",\n          min: \"0\",\n          max: \"100\",\n          defaultValue: 0,\n          id: \"scrub-bar\",\n          disabled: !loaded,\n          onChange: () => {\n            updatePlayback();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 9\n  }, this);\n}\n_s(AudioVisualizer, \"BhC42Dqsv+e1UECw1wS0mXP6DMQ=\");\n_c = AudioVisualizer;\nexport default AudioVisualizer;\nvar _c;\n$RefreshReg$(_c, \"AudioVisualizer\");","map":{"version":3,"names":["React","useRef","useState","useEffect","VisibilitySensor","AudioVisualizer","props","audioElement","setAudioElement","analyser","setAnalyser","loaded","setLoaded","canvasAreaRef","fileInputRef","frequencyRef","backgroundRef","scrubBarRef","play","setPlay","mouseOverBottom","setMouseOverBottom","isVisible","setIsVisible","bufferLength","frequencyBinCount","dataArray","Uint8Array","current","willReadFrequently","frequencyCtx","getContext","smudgeCtx","style","width","height","offsetWidth","offsetHeight","addEventListener","ultimatePeak","rotationAngle","rotateSmudge","smudgeVelocity","drawVisualization","requestAnimationFrame","getByteFrequencyData","clearRect","canvas","avgAmplitude","highFreqAvgAmplitude","midFreqAvgAmplitude","lowFreqAvgAmplitude","lowFreqPeakAmplitude","length","gradient","createLinearGradient","highFrequencyColor","getHighFrequencyColor","addColorStop","getLowFrequencyColor","fillStyle","verticalCenter","zeroAdjust","i","barWidth","x","x2","drawVisualizationBar","getAverageAmplitude","getPeakAmplitude","globalAlpha","Math","abs","drawImage","save","translate","rotate","PI","restore","imageDataTop","getImageData","imageDataBottom","putImageData","data","startIndex","endIndex","trunc","min","sum","peak","max","index","adjustedData","pow","barHeight","offsetX","random","offsetY","fillRect","lowFreqShiftingColorNumber","lowFrequencySum","lowFrequencyMax","lowFrequencyAverage","map","highFreqShiftingColorNumber","highFrequencySum","highFrequencyMax","highFrequencyAverage","value","start1","stop1","start2","stop2","loadAudio","pause","currentTime","Audio","updateScrubBar","duration","scrubBarValue","src","files","URL","createObjectURL","process","env","PUBLIC_URL","audioCtx","window","AudioContext","webkitAudioContext","createAnalyser","source","createMediaElementSource","connect","destination","togglePlay","updatePlayback","given","paused","opacity","transition","imageNumber","objectFit","minWidth","position","zIndex","top","left"],"sources":["/Users/davidmash/Documents/davidmash.github.io/src/Components/AudioVisualizer.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport VisibilitySensor from 'react-visibility-sensor';\n\nfunction AudioVisualizer(props) {\n    const [audioElement, setAudioElement] = useState(null);\n    const [analyser, setAnalyser] = useState(null);\n    const [loaded, setLoaded] = useState(false);\n    const canvasAreaRef = useRef(null);\n    const fileInputRef = useRef(null);\n    const frequencyRef = useRef(null);\n    const backgroundRef = useRef(null);\n    const scrubBarRef = useRef(null);\n    const [play, setPlay] = useState(false);\n    const [mouseOverBottom, setMouseOverBottom] = useState(false);\n    const [isVisible, setIsVisible] = useState(true);\n\n    useEffect(() => {\n        if (analyser) {\n            const bufferLength = analyser.frequencyBinCount;\n            let dataArray = new Uint8Array(bufferLength);\n\n            frequencyRef.current.willReadFrequently = true;\n            backgroundRef.current.willReadFrequently = true;\n            const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n            const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n            backgroundRef.current.style.width ='100%';\n            backgroundRef.current.style.height='100%';\n            frequencyRef.current.style.width ='100%';\n            frequencyRef.current.style.height='100%';\n            backgroundRef.current.width  = canvasAreaRef.current.offsetWidth;\n            backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n            frequencyRef.current.width  = canvasAreaRef.current.offsetWidth;\n            frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n\n            canvasAreaRef.current.addEventListener(\"resize\", () => {\n                backgroundRef.current.width  = canvasAreaRef.current.offsetWidth;\n                backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n                frequencyRef.current.width  = canvasAreaRef.current.offsetWidth;\n                frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n            });\n\n            let ultimatePeak = 1;\n            let rotationAngle = 0;\n            let rotateSmudge = false;\n            let smudgeVelocity = 0;\n\n            // Draw the frequency spectrum visualization\n            function drawVisualization() {\n                requestAnimationFrame(drawVisualization);\n                analyser.getByteFrequencyData(dataArray);\n                \n                // draw current frame to main canvas\n                frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvas.height);\n        \n                let avgAmplitude = 0;\n                let highFreqAvgAmplitude = 0;\n                let midFreqAvgAmplitude = 0;\n                let lowFreqAvgAmplitude = 0;\n                let lowFreqPeakAmplitude = 0;\n                if (dataArray && dataArray.length > 0) {\n                    let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n                    let highFrequencyColor = getHighFrequencyColor(dataArray);\n                    gradient.addColorStop(0, highFrequencyColor);\n                    gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n                    gradient.addColorStop(1, highFrequencyColor);\n                    frequencyCtx.fillStyle = gradient;\n                    let verticalCenter = frequencyCtx.canvas.height / 2;\n                    let zeroAdjust = 0;\n                    for (let i = dataArray.length - 1; i >= 0; i--) {\n                        if (dataArray[i] - 20 > 0) break;\n                        zeroAdjust++;\n                    }\n                    let barWidth = ((frequencyCtx.canvas.width / dataArray.length)) / 2;\n                    let x = 0;\n                    let x2 = frequencyCtx.canvas.width;\n                    for (let i = 0; i < dataArray.length - zeroAdjust; i++) {\n                        drawVisualizationBar(i, barWidth, x, verticalCenter);\n                        drawVisualizationBar(i, barWidth, x2, verticalCenter);\n                        x += (frequencyCtx.canvas.width / (dataArray.length - zeroAdjust)) / 2;\n                        x2 -= (frequencyCtx.canvas.width / (dataArray.length - zeroAdjust)) / 2;\n                    }\n                    avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n                    highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n                    midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n                    lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n                    lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n                    frequencyCtx.globalAlpha = (Math.abs(0.2 - (avgAmplitude / 200)) + 0.1) / 2;\n                }\n\n                //smudge effect\n                rotateSmudge = (rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8) || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n                if (rotateSmudge) {\n                    smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n                    rotationAngle = (rotationAngle + 1) % 360;\n                    smudgeVelocity = (lowFreqAvgAmplitude) / 5 * (midFreqAvgAmplitude < highFreqAvgAmplitude * 2)? -1: 1;\n                    // Save the current canvas state\n                    smudgeCtx.save();\n                    // Rotate the canvas\n                    smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n                    smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n                    smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n                    // Draw the smudged image on the canvas\n                    smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n                    // Restore the canvas state\n                    smudgeCtx.restore();\n                    smudgeCtx.globalAlpha = Math.abs(0.04 - (avgAmplitude / 4000));\n                } else {\n                    rotationAngle = 0;\n                    var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n                    var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n                    smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n                    smudgeCtx.globalAlpha = 0.5 - (avgAmplitude / 100);\n                    smudgeVelocity = (avgAmplitude < 10)? avgAmplitude * 2: ((lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.5 > midFreqAvgAmplitude + highFreqAvgAmplitude)? -1: 1) * avgAmplitude / 4;\n                    smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n                    smudgeCtx.putImageData(imageDataBottom, 0, (smudgeCtx.canvas.height / 2) + smudgeVelocity);\n                    smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n                }\n            }\n        \n            function getAverageAmplitude(data, startIndex, endIndex) {\n                startIndex = Math.trunc(startIndex);\n                endIndex = Math.min(Math.trunc(endIndex), data.length);\n                let sum = 0;\n                for (let i = startIndex; i < endIndex; i++) {\n                    sum += data[i];\n                }\n                return sum / (endIndex - startIndex - 1);\n            }\n        \n            function getPeakAmplitude(data, startIndex, endIndex) {\n                startIndex = Math.trunc(startIndex);\n                endIndex = Math.min(Math.trunc(endIndex), data.length);\n                let peak = 0;\n                for (let i = startIndex; i < endIndex; i++) {\n                    peak = Math.max(peak, data[i]);\n                }\n                return peak;\n            }\n        \n            function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n                if (dataArray[index] > ultimatePeak) {\n                    ultimatePeak = dataArray[index];\n                }\n                //take the square of the data like this will amplify peaks\n                const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - (index / dataArray.length))) * ((index + (dataArray.length / 2)) / dataArray.length);\n                let barHeight = adjustedData;\n                let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n                let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n                let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n                frequencyCtx.fillRect(x + offsetX, verticalCenter - (barHeight / 4) + offsetY, barWidth + offsetWidth, barHeight / 2);\n            }\n        \n            let lowFreqShiftingColorNumber = 0;\n            function getLowFrequencyColor(dataArray) {\n                let lowFrequencySum = 0;\n                let lowFrequencyMax = 0;\n                for (let i = 0; i < dataArray.length / 2; i++) {\n                    lowFrequencySum += dataArray[i];\n                    if (dataArray[i] > lowFrequencyMax) {\n                        lowFrequencyMax = dataArray[i];\n                    }\n                }\n                let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n                if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n                    lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + (lowFrequencyMax / (lowFrequencyAverage * 20)) + (lowFrequencyAverage / ultimatePeak)) % 255;\n                }\n                return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%,` + (lowFrequencySum / (lowFrequencyMax + 0.1)) + `)`;\n            }\n        \n            let highFreqShiftingColorNumber = 0;\n            function getHighFrequencyColor(dataArray) {\n                let highFrequencySum = 0;\n                let highFrequencyMax = 0;\n                for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n                    highFrequencySum += dataArray[i];\n                    if (dataArray[i] > highFrequencyMax) {\n                        highFrequencyMax = dataArray[i];\n                    }\n                }\n                let highFrequencyAverage = highFrequencySum / (dataArray.length/ 2);\n                if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n                    highFreqShiftingColorNumber = (highFreqShiftingColorNumber + (highFrequencyMax / (highFrequencyAverage * 200)) + (highFrequencyAverage / ultimatePeak)) % 255;\n                }\n                return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%,` + (highFrequencySum / (highFrequencyMax + 0.1)) + `)`;\n            }\n        \n            function map(value, start1, stop1, start2, stop2) {\n                return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n            }\n\n            drawVisualization();\n        }\n    }, [analyser]);\n\n    // Initialize audio context and elements when the file input changes\n    function loadAudio() {\n        if (audioElement) {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n        }\n        setAudioElement(new Audio(),\n            () => {\n                function updateScrubBar() {\n                    if(audioElement && scrubBarRef.current) {\n                        let currentTime = audioElement.currentTime;\n                        let duration = audioElement.duration;\n                        let scrubBarValue = (currentTime/duration) * 100;\n                        scrubBarRef.current.value = scrubBarValue;\n                    }\n                }\n                audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n                audioElement.src = (fileInputRef.current && fileInputRef.current.files[0])? URL.createObjectURL(fileInputRef.current.files[0]): process.env.PUBLIC_URL + '/music/song.mp3';\n                audioElement.addEventListener(\"loadeddata\", () => {\n                    setLoaded(true);\n                });\n                audioElement.addEventListener(\"ended\", () => {\n                    setPlay(false);\n                });\n                const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n                setAnalyser(audioCtx.createAnalyser(),\n                    () => {\n                        const source = audioCtx.createMediaElementSource(audioElement);\n                        source.connect(analyser);\n                        analyser.connect(audioCtx.destination);\n                        togglePlay(true);\n                    }\n                );\n            }\n        );\n    }\n\n    function updatePlayback() {\n        if(audioElement && scrubBarRef.current) {\n            let scrubBarValue = scrubBarRef.current.value;\n            let currentTime = (scrubBarValue / 100) * audioElement.duration;\n            audioElement.currentTime = currentTime;\n        }\n    }\n\n    function togglePlay(given) {\n        if (audioElement) {\n            if ((given === true) || audioElement.paused) {\n                audioElement.play();\n                setPlay(true);\n            } else {\n                audioElement.pause();\n                setPlay(false);\n            }\n        } else {\n            loadAudio();\n        }\n    }\n\n    return (\n        <VisibilitySensor onChange={setIsVisible}>\n            <div style={props.style} className='canvas-area no-select' ref={canvasAreaRef}>\n                <br />\n                <br />\n                <div className=\"main-header-container\">\n                    <h2 className={\"main-header\"} style={play?{opacity: 0, transition: \"2s opacity\"}:{opacity: 0.8, transition: \"3s opacity\"}}>David Mash</h2>\n                </div>\n                <div className=\"control-panel\" onClick={togglePlay}>\n                    {play?\n                    <img alt={\"\"} src={process.env.PUBLIC_URL + '/images/pause-button.png'} className={\"pause-button\"} />\n                    :\n                    <img alt={\"\"} src={process.env.PUBLIC_URL + '/images/play-button.png'} className={\"play-button\"} />\n                    }\n                </div>\n                <br />\n                <canvas ref={frequencyRef} id=\"frequency\" onClick={togglePlay}/>\n                <canvas ref={backgroundRef} id=\"background\" />\n                <img alt={\"\"} src={process.env.PUBLIC_URL + '/images/main_images/' + props.imageNumber + '.jpeg'} style={{objectFit: \"cover\", height: \"100%\", minWidth: \"100%\", width: \"auto\", position: \"absolute\", zIndex: \"-3\", top: \"0px\", left: \"0px\"}}/>\n                <div\n                    className='bottom-controls'\n                    onMouseOver={() => {if (!mouseOverBottom) setMouseOverBottom(true);}}\n                    onMouseLeave={() => {if (mouseOverBottom) setMouseOverBottom(false);}}\n                    style={mouseOverBottom?{opacity: 0.7, transition: \"opacity 300ms\"}:play?{opacity: 0, transition: \"opacity 300ms\"}:{opacity: 0.4, transition: \"opacity 300ms\"}}\n                >\n                    <input\n                        ref={scrubBarRef}\n                        className=\"scrub-bar\"\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"100\"\n                        defaultValue={0}\n                        id=\"scrub-bar\"\n                        disabled={!loaded}\n                        onChange={() => {updatePlayback();}}\n                    />\n                    {/*<input className={\"file-input\"} type=\"file\" ref={fileInputRef} onChange={loadAudio} />*/}\n                </div>\n            </div>\n        </VisibilitySensor>\n    );\n}\n\nexport default AudioVisualizer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}