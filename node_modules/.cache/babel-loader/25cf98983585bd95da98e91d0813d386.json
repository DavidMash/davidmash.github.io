{"ast":null,"code":"var _jsxFileName = \"/Users/davidmash/Documents/portfolio/src/Components/AudioVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport myWorker from '../js/myWorker.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nonmessage = e => {\n  fileInputRef = e.data.fileInputRef;\n  canvasWidth = e.data.canvasWidth;\n  scrubBarRef = e.data.scrubBarRef;\n  setLoaded = e.data.setLoaded;\n  setPlay = e.data.setPlay;\n  frequencyRef = e.data.frequencyRef;\n  backgroundRef = e.data.backgroundRef;\n  audioCtx = new AudioContext();\n  source = audioCtx.createMediaElementSource(new Audio());\n  analyser = audioCtx.createAnalyser();\n  source.connect(analyser);\n  analyser.connect(audioCtx.destination);\n  bufferLength = analyser.frequencyBinCount;\n  dataArray = new Uint8Array(bufferLength);\n  if (fileInputRef) {\n    fileInputRef.current.addEventListener(\"change\", handleFileInput);\n  }\n};\nfunction handleFileInput() {\n  let audioElement = new Audio();\n  audioElement.src = fileInputRef.current && fileInputRef.current.files[0] ? URL.createObjectURL(fileInputRef.current.files[0]) : process.env.PUBLIC_URL + '/music/song.mp3';\n  source.disconnect();\n  source = audioCtx.createMediaElementSource(audioElement);\n  source.connect(analyser);\n  audioElement.addEventListener(\"loadeddata\", () => {\n    postMessage({\n      type: 'loaded'\n    });\n  });\n  audioElement.addEventListener(\"timeupdate\", () => {\n    let currentTime = audioElement.currentTime;\n    let duration = audioElement.duration;\n    let scrubBarValue = currentTime / duration * 100;\n    postMessage({\n      type: 'scrubBarValue',\n      value: scrubBarValue\n    });\n  });\n  function updateScrubBar() {\n    if (audioElement && scrubBarRef.current) {\n      let currentTime = audioElement.currentTime;\n      let duration = audioElement.duration;\n      let scrubBarValue = currentTime / duration * 100;\n      scrubBarRef.current.value = scrubBarValue;\n    }\n  }\n  audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n  audioElement.addEventListener(\"loadeddata\", () => {\n    setLoaded(true);\n  });\n  audioElement.addEventListener(\"ended\", () => {\n    setPlay(false);\n  });\n  frequencyRef.current.willReadFrequently = true;\n  backgroundRef.current.willReadFrequently = true;\n  const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n  const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n  backgroundRef.current.style.width = '100%';\n  backgroundRef.current.style.height = '100%';\n  frequencyRef.current.style.width = '100%';\n  frequencyRef.current.style.height = '100%';\n  backgroundRef.current.width = canvasAreaRef.current.offsetWidth;\n  backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n  frequencyRef.current.width = canvasAreaRef.current.offsetWidth;\n  frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n  canvasAreaRef.current.addEventListener(\"resize\", () => {\n    backgroundRef.current.width = canvasAreaRef.current.offsetWidth;\n    backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n    frequencyRef.current.width = canvasAreaRef.current.offsetWidth;\n    frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n  });\n  let ultimatePeak = 1;\n  let rotationAngle = 0;\n  let rotateSmudge = false;\n  let smudgeVelocity = 0;\n  // Draw the frequency spectrum visualization\n  function drawVisualization() {\n    requestIdleCallback(drawVisualization);\n    analyser.getByteFrequencyData(dataArray);\n\n    // draw current frame to main canvas\n    frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvas.height);\n    let avgAmplitude = 0;\n    let highFreqAvgAmplitude = 0;\n    let midFreqAvgAmplitude = 0;\n    let lowFreqAvgAmplitude = 0;\n    let lowFreqPeakAmplitude = 0;\n    if (dataArray && dataArray.length > 0) {\n      let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n      let highFrequencyColor = getHighFrequencyColor(dataArray);\n      gradient.addColorStop(0, highFrequencyColor);\n      gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n      gradient.addColorStop(1, highFrequencyColor);\n      frequencyCtx.fillStyle = gradient;\n      let verticalCenter = frequencyCtx.canvas.height / 2;\n      let zeroAdjust = 0;\n      for (let i = dataArray.length - 1; i >= 0; i--) {\n        if (dataArray[i] - 20 > 0) break;\n        zeroAdjust++;\n      }\n      let barWidth = frequencyCtx.canvas.width / dataArray.length / 2;\n      let x = 0;\n      let x2 = frequencyCtx.canvas.width;\n      for (let i = 0; i < dataArray.length - zeroAdjust; i++) {\n        drawVisualizationBar(i, barWidth, x, verticalCenter);\n        drawVisualizationBar(i, barWidth, x2, verticalCenter);\n        x += frequencyCtx.canvas.width / (dataArray.length - zeroAdjust) / 2;\n        x2 -= frequencyCtx.canvas.width / (dataArray.length - zeroAdjust) / 2;\n      }\n      avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n      highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n      midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n      lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n      lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n      frequencyCtx.globalAlpha = (Math.abs(0.2 - avgAmplitude / 200) + 0.1) / 2;\n    }\n\n    //smudge effect\n    rotateSmudge = rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8 || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n    if (rotateSmudge) {\n      smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n      rotationAngle = (rotationAngle + 1) % 360;\n      smudgeVelocity = lowFreqAvgAmplitude / 5 * (midFreqAvgAmplitude < highFreqAvgAmplitude * 2) ? -1 : 1;\n      // Save the current canvas state\n      smudgeCtx.save();\n      // Rotate the canvas\n      smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n      smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n      smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n      // Draw the smudged image on the canvas\n      smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n      // Restore the canvas state\n      smudgeCtx.restore();\n      smudgeCtx.globalAlpha = Math.abs(0.04 - avgAmplitude / 4000);\n    } else {\n      rotationAngle = 0;\n      var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n      var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n      smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n      smudgeCtx.globalAlpha = 0.5 - avgAmplitude / 100;\n      smudgeVelocity = avgAmplitude < 10 ? avgAmplitude * 2 : (lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.5 > midFreqAvgAmplitude + highFreqAvgAmplitude ? -1 : 1) * avgAmplitude / 4;\n      smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n      smudgeCtx.putImageData(imageDataBottom, 0, smudgeCtx.canvas.height / 2 + smudgeVelocity);\n      smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n    }\n  }\n  function getAverageAmplitude(data, startIndex, endIndex) {\n    startIndex = Math.trunc(startIndex);\n    endIndex = Math.min(Math.trunc(endIndex), data.length);\n    let sum = 0;\n    for (let i = startIndex; i < endIndex; i++) {\n      sum += data[i];\n    }\n    return sum / (endIndex - startIndex - 1);\n  }\n  function getPeakAmplitude(data, startIndex, endIndex) {\n    startIndex = Math.trunc(startIndex);\n    endIndex = Math.min(Math.trunc(endIndex), data.length);\n    let peak = 0;\n    for (let i = startIndex; i < endIndex; i++) {\n      peak = Math.max(peak, data[i]);\n    }\n    return peak;\n  }\n  function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n    if (dataArray[index] > ultimatePeak) {\n      ultimatePeak = dataArray[index];\n    }\n    //take the square of the data like this will amplify peaks\n    const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - index / dataArray.length)) * ((index + dataArray.length / 2) / dataArray.length);\n    let barHeight = adjustedData;\n    let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n    let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n    let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n    frequencyCtx.fillRect(x + offsetX, verticalCenter - barHeight / 4 + offsetY, barWidth + offsetWidth, barHeight / 2);\n  }\n  let lowFreqShiftingColorNumber = 0;\n  function getLowFrequencyColor(dataArray) {\n    let lowFrequencySum = 0;\n    let lowFrequencyMax = 0;\n    for (let i = 0; i < dataArray.length / 2; i++) {\n      lowFrequencySum += dataArray[i];\n      if (dataArray[i] > lowFrequencyMax) {\n        lowFrequencyMax = dataArray[i];\n      }\n    }\n    let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n    if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n      lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + lowFrequencyMax / (lowFrequencyAverage * 20) + lowFrequencyAverage / ultimatePeak) % 255;\n    }\n    return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%,` + lowFrequencySum / (lowFrequencyMax + 0.1) + `)`;\n  }\n  let highFreqShiftingColorNumber = 0;\n  function getHighFrequencyColor(dataArray) {\n    let highFrequencySum = 0;\n    let highFrequencyMax = 0;\n    for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n      highFrequencySum += dataArray[i];\n      if (dataArray[i] > highFrequencyMax) {\n        highFrequencyMax = dataArray[i];\n      }\n    }\n    let highFrequencyAverage = highFrequencySum / (dataArray.length / 2);\n    if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n      highFreqShiftingColorNumber = (highFreqShiftingColorNumber + highFrequencyMax / (highFrequencyAverage * 200) + highFrequencyAverage / ultimatePeak) % 255;\n    }\n    return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%,` + highFrequencySum / (highFrequencyMax + 0.1) + `)`;\n  }\n  function map(value, start1, stop1, start2, stop2) {\n    return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n  }\n  drawVisualization();\n}\nfunction AudioVisualizer(props) {\n  _s();\n  const [audioElement, setAudioElement] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n  const canvasAreaRef = useRef(null);\n  const fileInputRef = useRef(null);\n  const frequencyRef = useRef(null);\n  const backgroundRef = useRef(null);\n  const scrubBarRef = useRef(null);\n  const [play, setPlay] = useState(false);\n  const [mouseOverBottom, setMouseOverBottom] = useState(false);\n\n  // create a new web worker\n  const worker = new Worker(myWorker);\n  useEffect(() => {\n    // send the file input and canvas refs to the worker\n    const canvasWidth = canvasAreaRef.current.offsetWidth;\n    const canvasHeight = canvasAreaRef.current.offsetHeight;\n    worker.postMessage({\n      fileInputRef,\n      canvasWidth,\n      canvasHeight,\n      scrubBarRef,\n      setLoaded,\n      setPlay,\n      frequencyRef,\n      backgroundRef\n    });\n    worker.onmessage = e => {\n      // handle messages from the worker\n      if (e.data.type === 'loaded') {\n        setLoaded(true);\n      } else if (e.data.type === 'scrubBarValue') {\n        scrubBarRef.current.value = e.data.value;\n      }\n    };\n    return () => {\n      // stop the worker when the component unmounts\n      worker.terminate();\n    };\n  }, [play, fileInputRef]);\n\n  // Initialize audio context and elements when the file input changes\n  function loadAudio() {\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n    }\n    setAudioElement(new Audio());\n  }\n  function updatePlayback() {\n    if (audioElement && scrubBarRef.current) {\n      let scrubBarValue = scrubBarRef.current.value;\n      let currentTime = scrubBarValue / 100 * audioElement.duration;\n      audioElement.currentTime = currentTime;\n    }\n  }\n  function togglePlay() {\n    if (audioElement) {\n      if (audioElement.paused) {\n        audioElement.play();\n        setPlay(true);\n      } else {\n        audioElement.pause();\n        setPlay(false);\n      }\n    }\n  }\n  if (!audioElement) {\n    loadAudio();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: props.style,\n    className: \"canvas-area no-select\",\n    ref: canvasAreaRef,\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-header-container\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"main-header\",\n        style: play ? {\n          opacity: 0,\n          transition: \"2s opacity\"\n        } : {\n          opacity: 0.8,\n          transition: \"3s opacity\"\n        },\n        children: \"David Mash\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 13\n    }, this), loaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      onClick: togglePlay,\n      children: play ? /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"\",\n        src: process.env.PUBLIC_URL + '/images/pause-button.png',\n        className: \"pause-button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"\",\n        src: process.env.PUBLIC_URL + '/images/play-button.png',\n        className: \"play-button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: frequencyRef,\n      id: \"frequency\",\n      onClick: togglePlay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: backgroundRef,\n      id: \"background\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      alt: \"\",\n      src: process.env.PUBLIC_URL + '/images/main_images/' + props.imageNumber + '.jpeg',\n      style: {\n        objectFit: \"cover\",\n        height: \"100%\",\n        minWidth: \"100%\",\n        width: \"auto\",\n        position: \"absolute\",\n        zIndex: \"-3\",\n        top: \"0px\",\n        left: \"0px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bottom-controls\",\n      onMouseOver: () => {\n        if (!mouseOverBottom) setMouseOverBottom(true);\n      },\n      onMouseLeave: () => {\n        if (mouseOverBottom) setMouseOverBottom(false);\n      },\n      style: mouseOverBottom ? {\n        opacity: 0.8,\n        transition: \"opacity 300ms\"\n      } : play ? {\n        opacity: 0,\n        transition: \"opacity 300ms\"\n      } : {\n        opacity: 0.4,\n        transition: \"opacity 300ms\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: scrubBarRef,\n        className: \"scrub-bar\",\n        type: \"range\",\n        min: \"0\",\n        max: \"100\",\n        defaultValue: 0,\n        id: \"scrub-bar\",\n        disabled: !loaded,\n        onChange: () => {\n          updatePlayback();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 9\n  }, this);\n}\n_s(AudioVisualizer, \"fnOuns0ylvlJRM8NdvyLEaTBsbE=\");\n_c = AudioVisualizer;\nexport default AudioVisualizer;\nvar _c;\n$RefreshReg$(_c, \"AudioVisualizer\");","map":{"version":3,"names":["React","useRef","useState","useEffect","myWorker","onmessage","e","fileInputRef","data","canvasWidth","scrubBarRef","setLoaded","setPlay","frequencyRef","backgroundRef","audioCtx","AudioContext","source","createMediaElementSource","Audio","analyser","createAnalyser","connect","destination","bufferLength","frequencyBinCount","dataArray","Uint8Array","current","addEventListener","handleFileInput","audioElement","src","files","URL","createObjectURL","process","env","PUBLIC_URL","disconnect","postMessage","type","currentTime","duration","scrubBarValue","value","updateScrubBar","willReadFrequently","frequencyCtx","getContext","smudgeCtx","style","width","height","canvasAreaRef","offsetWidth","offsetHeight","ultimatePeak","rotationAngle","rotateSmudge","smudgeVelocity","drawVisualization","requestIdleCallback","getByteFrequencyData","clearRect","canvas","avgAmplitude","highFreqAvgAmplitude","midFreqAvgAmplitude","lowFreqAvgAmplitude","lowFreqPeakAmplitude","length","gradient","createLinearGradient","highFrequencyColor","getHighFrequencyColor","addColorStop","getLowFrequencyColor","fillStyle","verticalCenter","zeroAdjust","i","barWidth","x","x2","drawVisualizationBar","getAverageAmplitude","getPeakAmplitude","globalAlpha","Math","abs","drawImage","save","translate","rotate","PI","restore","imageDataTop","getImageData","imageDataBottom","putImageData","startIndex","endIndex","trunc","min","sum","peak","max","index","adjustedData","pow","barHeight","offsetX","random","offsetY","fillRect","lowFreqShiftingColorNumber","lowFrequencySum","lowFrequencyMax","lowFrequencyAverage","map","highFreqShiftingColorNumber","highFrequencySum","highFrequencyMax","highFrequencyAverage","start1","stop1","start2","stop2","AudioVisualizer","props","setAudioElement","loaded","play","mouseOverBottom","setMouseOverBottom","worker","Worker","canvasHeight","terminate","loadAudio","pause","updatePlayback","togglePlay","paused","opacity","transition","imageNumber","objectFit","minWidth","position","zIndex","top","left"],"sources":["/Users/davidmash/Documents/portfolio/src/Components/AudioVisualizer.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport myWorker from '../js/myWorker.js';\n\n\nonmessage = (e) => {\n    fileInputRef = e.data.fileInputRef;\n    canvasWidth = e.data.canvasWidth;\n    scrubBarRef = e.data.scrubBarRef;\n    setLoaded = e.data.setLoaded;\n    setPlay = e.data.setPlay;\n    frequencyRef = e.data.frequencyRef;\n    backgroundRef = e.data.backgroundRef;\n\n    audioCtx = new AudioContext();\n    source = audioCtx.createMediaElementSource(new Audio());\n    analyser = audioCtx.createAnalyser();\n    source.connect(analyser);\n    analyser.connect(audioCtx.destination);\n    bufferLength = analyser.frequencyBinCount;\n    dataArray = new Uint8Array(bufferLength);\n\n    if (fileInputRef) {\n        fileInputRef.current.addEventListener(\"change\", handleFileInput);\n    }\n};\n\nfunction handleFileInput() {\n    let audioElement = new Audio();\n    audioElement.src = (fileInputRef.current && fileInputRef.current.files[0])? URL.createObjectURL(fileInputRef.current.files[0]): process.env.PUBLIC_URL + '/music/song.mp3';\n    source.disconnect();\n    source = audioCtx.createMediaElementSource(audioElement);\n    source.connect(analyser);\n\n    audioElement.addEventListener(\"loadeddata\", () => {\n        postMessage({ type: 'loaded' });\n    });\n\n    audioElement.addEventListener(\"timeupdate\", () => {\n        let currentTime = audioElement.currentTime;\n        let duration = audioElement.duration;\n        let scrubBarValue = (currentTime / duration) * 100;\n        postMessage({ type: 'scrubBarValue', value: scrubBarValue });\n    });\n\n    function updateScrubBar() {\n        if(audioElement && scrubBarRef.current) {\n            let currentTime = audioElement.currentTime;\n            let duration = audioElement.duration;\n            let scrubBarValue = (currentTime/duration) * 100;\n            scrubBarRef.current.value = scrubBarValue;\n        }\n    }\n\n    audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n    audioElement.addEventListener(\"loadeddata\", () => {\n        setLoaded(true);\n    });\n    audioElement.addEventListener(\"ended\", () => {\n        setPlay(false);\n    });\n\n    frequencyRef.current.willReadFrequently = true;\n    backgroundRef.current.willReadFrequently = true;\n    const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n    const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n    backgroundRef.current.style.width ='100%';\n    backgroundRef.current.style.height='100%';\n    frequencyRef.current.style.width ='100%';\n    frequencyRef.current.style.height='100%';\n    backgroundRef.current.width  = canvasAreaRef.current.offsetWidth;\n    backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n    frequencyRef.current.width  = canvasAreaRef.current.offsetWidth;\n    frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n\n    canvasAreaRef.current.addEventListener(\"resize\", () => {\n        backgroundRef.current.width  = canvasAreaRef.current.offsetWidth;\n        backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n        frequencyRef.current.width  = canvasAreaRef.current.offsetWidth;\n        frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n    });\n\n    let ultimatePeak = 1;\n    let rotationAngle = 0;\n    let rotateSmudge = false;\n    let smudgeVelocity = 0;\n    // Draw the frequency spectrum visualization\n    function drawVisualization() {\n        requestIdleCallback(drawVisualization);\n        analyser.getByteFrequencyData(dataArray);\n        \n        // draw current frame to main canvas\n        frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvas.height);\n\n        let avgAmplitude = 0;\n        let highFreqAvgAmplitude = 0;\n        let midFreqAvgAmplitude = 0;\n        let lowFreqAvgAmplitude = 0;\n        let lowFreqPeakAmplitude = 0;\n        if (dataArray && dataArray.length > 0) {\n            let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n            let highFrequencyColor = getHighFrequencyColor(dataArray);\n            gradient.addColorStop(0, highFrequencyColor);\n            gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n            gradient.addColorStop(1, highFrequencyColor);\n            frequencyCtx.fillStyle = gradient;\n            let verticalCenter = frequencyCtx.canvas.height / 2;\n            let zeroAdjust = 0;\n            for (let i = dataArray.length - 1; i >= 0; i--) {\n                if (dataArray[i] - 20 > 0) break;\n                zeroAdjust++;\n            }\n            let barWidth = ((frequencyCtx.canvas.width / dataArray.length)) / 2;\n            let x = 0;\n            let x2 = frequencyCtx.canvas.width;\n            for (let i = 0; i < dataArray.length - zeroAdjust; i++) {\n                drawVisualizationBar(i, barWidth, x, verticalCenter);\n                drawVisualizationBar(i, barWidth, x2, verticalCenter);\n                x += (frequencyCtx.canvas.width / (dataArray.length - zeroAdjust)) / 2;\n                x2 -= (frequencyCtx.canvas.width / (dataArray.length - zeroAdjust)) / 2;\n            }\n            avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n            highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n            midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n            lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n            lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n            frequencyCtx.globalAlpha = (Math.abs(0.2 - (avgAmplitude / 200)) + 0.1) / 2;\n        }\n\n        //smudge effect\n        rotateSmudge = (rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8) || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n        if (rotateSmudge) {\n            smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n            rotationAngle = (rotationAngle + 1) % 360;\n            smudgeVelocity = (lowFreqAvgAmplitude) / 5 * (midFreqAvgAmplitude < highFreqAvgAmplitude * 2)? -1: 1;\n            // Save the current canvas state\n            smudgeCtx.save();\n            // Rotate the canvas\n            smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n            smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n            smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n            // Draw the smudged image on the canvas\n            smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n            // Restore the canvas state\n            smudgeCtx.restore();\n            smudgeCtx.globalAlpha = Math.abs(0.04 - (avgAmplitude / 4000));\n        } else {\n            rotationAngle = 0;\n            var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n            var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n            smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n            smudgeCtx.globalAlpha = 0.5 - (avgAmplitude / 100);\n            smudgeVelocity = (avgAmplitude < 10)? avgAmplitude * 2: ((lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.5 > midFreqAvgAmplitude + highFreqAvgAmplitude)? -1: 1) * avgAmplitude / 4;\n            smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n            smudgeCtx.putImageData(imageDataBottom, 0, (smudgeCtx.canvas.height / 2) + smudgeVelocity);\n            smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n        }\n    }\n\n    function getAverageAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let sum = 0;\n        for (let i = startIndex; i < endIndex; i++) {\n            sum += data[i];\n        }\n        return sum / (endIndex - startIndex - 1);\n    }\n\n    function getPeakAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let peak = 0;\n        for (let i = startIndex; i < endIndex; i++) {\n            peak = Math.max(peak, data[i]);\n        }\n        return peak;\n    }\n\n    function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n        if (dataArray[index] > ultimatePeak) {\n            ultimatePeak = dataArray[index];\n        }\n        //take the square of the data like this will amplify peaks\n        const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - (index / dataArray.length))) * ((index + (dataArray.length / 2)) / dataArray.length);\n        let barHeight = adjustedData;\n        let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n        frequencyCtx.fillRect(x + offsetX, verticalCenter - (barHeight / 4) + offsetY, barWidth + offsetWidth, barHeight / 2);\n    }\n\n    let lowFreqShiftingColorNumber = 0;\n    function getLowFrequencyColor(dataArray) {\n        let lowFrequencySum = 0;\n        let lowFrequencyMax = 0;\n        for (let i = 0; i < dataArray.length / 2; i++) {\n            lowFrequencySum += dataArray[i];\n            if (dataArray[i] > lowFrequencyMax) {\n                lowFrequencyMax = dataArray[i];\n            }\n        }\n        let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n        if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n            lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + (lowFrequencyMax / (lowFrequencyAverage * 20)) + (lowFrequencyAverage / ultimatePeak)) % 255;\n        }\n        return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%,` + (lowFrequencySum / (lowFrequencyMax + 0.1)) + `)`;\n    }\n\n    let highFreqShiftingColorNumber = 0;\n    function getHighFrequencyColor(dataArray) {\n        let highFrequencySum = 0;\n        let highFrequencyMax = 0;\n        for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n            highFrequencySum += dataArray[i];\n            if (dataArray[i] > highFrequencyMax) {\n                highFrequencyMax = dataArray[i];\n            }\n        }\n        let highFrequencyAverage = highFrequencySum / (dataArray.length/ 2);\n        if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n            highFreqShiftingColorNumber = (highFreqShiftingColorNumber + (highFrequencyMax / (highFrequencyAverage * 200)) + (highFrequencyAverage / ultimatePeak)) % 255;\n        }\n        return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%,` + (highFrequencySum / (highFrequencyMax + 0.1)) + `)`;\n    }\n\n    function map(value, start1, stop1, start2, stop2) {\n        return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n    }\n    \n    drawVisualization();\n}\n\nfunction AudioVisualizer(props) {\n    const [audioElement, setAudioElement] = useState(null);\n    const [loaded, setLoaded] = useState(false);\n    const canvasAreaRef = useRef(null);\n    const fileInputRef = useRef(null);\n    const frequencyRef = useRef(null);\n    const backgroundRef = useRef(null);\n    const scrubBarRef = useRef(null);\n    const [play, setPlay] = useState(false);\n    const [mouseOverBottom, setMouseOverBottom] = useState(false);\n\n    // create a new web worker\n    const worker = new Worker(myWorker);\n\n    useEffect(() => {\n        // send the file input and canvas refs to the worker\n        const canvasWidth = canvasAreaRef.current.offsetWidth;\n        const canvasHeight = canvasAreaRef.current.offsetHeight;\n        worker.postMessage({ fileInputRef, canvasWidth, canvasHeight, scrubBarRef, setLoaded, setPlay, frequencyRef, backgroundRef});\n\n        worker.onmessage = (e) => {\n            // handle messages from the worker\n            if (e.data.type === 'loaded') {\n                setLoaded(true);\n            } else if (e.data.type === 'scrubBarValue') {\n                scrubBarRef.current.value = e.data.value;\n            }\n        };\n\n        return () => {\n            // stop the worker when the component unmounts\n            worker.terminate();\n        };\n    }, [play, fileInputRef]);\n\n    // Initialize audio context and elements when the file input changes\n    function loadAudio() {\n        if (audioElement) {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n        }\n        setAudioElement(new Audio());\n    }\n\n    function updatePlayback() {\n        if(audioElement && scrubBarRef.current) {\n            let scrubBarValue = scrubBarRef.current.value;\n            let currentTime = (scrubBarValue / 100) * audioElement.duration;\n            audioElement.currentTime = currentTime;\n        }\n    }\n\n    function togglePlay() {\n        if (audioElement) {\n            if (audioElement.paused) {\n                audioElement.play();\n                setPlay(true);\n            } else {\n                audioElement.pause();\n                setPlay(false);\n            }\n        }\n    }\n\n    if (!audioElement) {\n        loadAudio();\n    }\n\n    return (\n        <div style={props.style} className='canvas-area no-select' ref={canvasAreaRef}>\n            <br />\n            <br />\n            <div className=\"main-header-container\">\n                <h2 className={\"main-header\"} style={play?{opacity: 0, transition: \"2s opacity\"}:{opacity: 0.8, transition: \"3s opacity\"}}>David Mash</h2>\n            </div>\n            {loaded?\n            <div className=\"control-panel\" onClick={togglePlay}>\n                {play?\n                <img alt={\"\"} src={process.env.PUBLIC_URL + '/images/pause-button.png'} className={\"pause-button\"} />\n                :\n                <img alt={\"\"} src={process.env.PUBLIC_URL + '/images/play-button.png'} className={\"play-button\"} />\n                }\n            </div>\n            :\n            <></>\n            }\n            <br />\n            <canvas ref={frequencyRef} id=\"frequency\" onClick={togglePlay}/>\n            <canvas ref={backgroundRef} id=\"background\" />\n            <img alt={\"\"} src={process.env.PUBLIC_URL + '/images/main_images/' + props.imageNumber + '.jpeg'} style={{objectFit: \"cover\", height: \"100%\", minWidth: \"100%\", width: \"auto\", position: \"absolute\", zIndex: \"-3\", top: \"0px\", left: \"0px\"}}/>\n            <div\n                className='bottom-controls'\n                onMouseOver={() => {if (!mouseOverBottom) setMouseOverBottom(true);}}\n                onMouseLeave={() => {if (mouseOverBottom) setMouseOverBottom(false);}}\n                style={mouseOverBottom?{opacity: 0.8, transition: \"opacity 300ms\"}:play?{opacity: 0, transition: \"opacity 300ms\"}:{opacity: 0.4, transition: \"opacity 300ms\"}}\n            >\n                <input\n                    ref={scrubBarRef}\n                    className=\"scrub-bar\"\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"100\"\n                    defaultValue={0}\n                    id=\"scrub-bar\"\n                    disabled={!loaded}\n                    onChange={() => {updatePlayback();}}\n                />\n                {/*<input className={\"file-input\"} type=\"file\" ref={fileInputRef} onChange={loadAudio} />*/}\n            </div>\n        </div>\n    );\n}\n\nexport default AudioVisualizer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}