{"ast":null,"code":"let audioCtx, analyser, source, bufferLength, dataArray, canvasAreaRef, scrubBarRef, setLoaded, setPlay, frequencyRef, backgroundRef, audioElement;\nonmessage = e => {\n  canvasAreaRef = e.data.canvasAreaRef;\n  scrubBarRef = e.data.scrubBarRef;\n  setLoaded = e.data.setLoaded;\n  setPlay = e.data.setPlay;\n  frequencyRef = e.data.frequencyRef;\n  backgroundRef = e.data.backgroundRef;\n  if (e.data.file) {\n    audioElement = new Audio();\n    audioElement.src = URL.createObjectURL(e.data.file);\n    audioCtx = new AudioContext();\n    source = audioCtx.createMediaElementSource(new Audio());\n    analyser = audioCtx.createAnalyser();\n    source.connect(analyser);\n    analyser.connect(audioCtx.destination);\n    bufferLength = analyser.frequencyBinCount;\n    dataArray = new Uint8Array(bufferLength);\n    audioElement.addEventListener(\"loadeddata\", () => {\n      if (setLoaded) {\n        setLoaded(true);\n      }\n      initVisualization();\n    });\n    audioElement.addEventListener(\"timeupdate\", () => {\n      if (scrubBarRef && scrubBarRef.current) {\n        let currentTime = audioElement.currentTime;\n        let duration = audioElement.duration;\n        let scrubBarValue = currentTime / duration * 100;\n        scrubBarRef.current.value = scrubBarValue;\n      }\n    });\n    audioElement.addEventListener(\"ended\", () => {\n      setPlay(false);\n    });\n  }\n};\nfunction initVisualization() {\n  function getAverageAmplitude(data, startIndex, endIndex) {\n    startIndex = Math.trunc(startIndex);\n    endIndex = Math.min(Math.trunc(endIndex), data.length);\n    let sum = 0;\n    for (let i = startIndex; i < endIndex; i++) {\n      sum += data[i];\n    }\n    return sum / (endIndex - startIndex - 1);\n  }\n  function getPeakAmplitude(data, startIndex, endIndex) {\n    startIndex = Math.trunc(startIndex);\n    endIndex = Math.min(Math.trunc(endIndex), data.length);\n    let peak = 0;\n    for (let i = startIndex; i < endIndex; i++) {\n      peak = Math.max(peak, data[i]);\n    }\n    return peak;\n  }\n  function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n    if (dataArray[index] > ultimatePeak) {\n      ultimatePeak = dataArray[index];\n    }\n    //take the square of the data like this will amplify peaks\n    const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - index / dataArray.length)) * ((index + dataArray.length / 2) / dataArray.length);\n    let barHeight = adjustedData;\n    let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n    let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n    let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n    frequencyCtx.fillRect(x + offsetX, verticalCenter - barHeight / 4 + offsetY, barWidth + offsetWidth, barHeight / 2);\n  }\n  let lowFreqShiftingColorNumber = 0;\n  function getLowFrequencyColor(dataArray) {\n    let lowFrequencySum = 0;\n    let lowFrequencyMax = 0;\n    for (let i = 0; i < dataArray.length / 2; i++) {\n      lowFrequencySum += dataArray[i];\n      if (dataArray[i] > lowFrequencyMax) {\n        lowFrequencyMax = dataArray[i];\n      }\n    }\n    let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n    if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n      lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + lowFrequencyMax / (lowFrequencyAverage * 20) + lowFrequencyAverage / ultimatePeak) % 255;\n    }\n    return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%,` + lowFrequencySum / (lowFrequencyMax + 0.1) + `)`;\n  }\n  let highFreqShiftingColorNumber = 0;\n  function getHighFrequencyColor(dataArray) {\n    let highFrequencySum = 0;\n    let highFrequencyMax = 0;\n    for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n      highFrequencySum += dataArray[i];\n      if (dataArray[i] > highFrequencyMax) {\n        highFrequencyMax = dataArray[i];\n      }\n    }\n    let highFrequencyAverage = highFrequencySum / (dataArray.length / 2);\n    if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n      highFreqShiftingColorNumber = (highFreqShiftingColorNumber + highFrequencyMax / (highFrequencyAverage * 200) + highFrequencyAverage / ultimatePeak) % 255;\n    }\n    return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%,` + highFrequencySum / (highFrequencyMax + 0.1) + `)`;\n  }\n  function map(value, start1, stop1, start2, stop2) {\n    return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n  }\n  frequencyRef.current.willReadFrequently = true;\n  backgroundRef.current.willReadFrequently = true;\n  const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n  const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n  backgroundRef.current.style.width = '100%';\n  backgroundRef.current.style.height = '100%';\n  frequencyRef.current.style.width = '100%';\n  frequencyRef.current.style.height = '100%';\n  backgroundRef.current.width = canvasAreaRef.current.offsetWidth;\n  backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n  frequencyRef.current.width = canvasAreaRef.current.offsetWidth;\n  frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n  canvasAreaRef.current.addEventListener(\"resize\", () => {\n    backgroundRef.current.width = canvasAreaRef.current.offsetWidth;\n    backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n    frequencyRef.current.width = canvasAreaRef.current.offsetWidth;\n    frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n  });\n  let ultimatePeak = 1;\n  let rotationAngle = 0;\n  let rotateSmudge = false;\n  let smudgeVelocity = 0;\n  // Draw the frequency spectrum visualization\n  function drawVisualization() {\n    requestIdleCallback(drawVisualization);\n    analyser.getByteFrequencyData(dataArray);\n\n    // draw current frame to main canvas\n    frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvas.height);\n    let avgAmplitude = 0;\n    let highFreqAvgAmplitude = 0;\n    let midFreqAvgAmplitude = 0;\n    let lowFreqAvgAmplitude = 0;\n    let lowFreqPeakAmplitude = 0;\n    if (dataArray && dataArray.length > 0) {\n      let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n      let highFrequencyColor = getHighFrequencyColor(dataArray);\n      gradient.addColorStop(0, highFrequencyColor);\n      gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n      gradient.addColorStop(1, highFrequencyColor);\n      frequencyCtx.fillStyle = gradient;\n      let verticalCenter = frequencyCtx.canvas.height / 2;\n      let zeroAdjust = 0;\n      for (let i = dataArray.length - 1; i >= 0; i--) {\n        if (dataArray[i] - 20 > 0) break;\n        zeroAdjust++;\n      }\n      let barWidth = frequencyCtx.canvas.width / dataArray.length / 2;\n      let x = 0;\n      let x2 = frequencyCtx.canvas.width;\n      for (let i = 0; i < dataArray.length - zeroAdjust; i++) {\n        drawVisualizationBar(i, barWidth, x, verticalCenter);\n        drawVisualizationBar(i, barWidth, x2, verticalCenter);\n        x += frequencyCtx.canvas.width / (dataArray.length - zeroAdjust) / 2;\n        x2 -= frequencyCtx.canvas.width / (dataArray.length - zeroAdjust) / 2;\n      }\n      avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n      highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n      midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n      lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n      lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n      frequencyCtx.globalAlpha = (Math.abs(0.2 - avgAmplitude / 200) + 0.1) / 2;\n    }\n\n    //smudge effect\n    rotateSmudge = rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8 || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n    if (rotateSmudge) {\n      smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n      rotationAngle = (rotationAngle + 1) % 360;\n      smudgeVelocity = lowFreqAvgAmplitude / 5 * (midFreqAvgAmplitude < highFreqAvgAmplitude * 2) ? -1 : 1;\n      // Save the current canvas state\n      smudgeCtx.save();\n      // Rotate the canvas\n      smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n      smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n      smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n      // Draw the smudged image on the canvas\n      smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n      // Restore the canvas state\n      smudgeCtx.restore();\n      smudgeCtx.globalAlpha = Math.abs(0.04 - avgAmplitude / 4000);\n    } else {\n      rotationAngle = 0;\n      var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n      var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n      smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n      smudgeCtx.globalAlpha = 0.5 - avgAmplitude / 100;\n      smudgeVelocity = avgAmplitude < 10 ? avgAmplitude * 2 : (lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.5 > midFreqAvgAmplitude + highFreqAvgAmplitude ? -1 : 1) * avgAmplitude / 4;\n      smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n      smudgeCtx.putImageData(imageDataBottom, 0, smudgeCtx.canvas.height / 2 + smudgeVelocity);\n      smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n    }\n  }\n  drawVisualization();\n}","map":{"version":3,"names":["audioCtx","analyser","source","bufferLength","dataArray","canvasAreaRef","scrubBarRef","setLoaded","setPlay","frequencyRef","backgroundRef","audioElement","onmessage","e","data","file","Audio","src","URL","createObjectURL","AudioContext","createMediaElementSource","createAnalyser","connect","destination","frequencyBinCount","Uint8Array","addEventListener","initVisualization","current","currentTime","duration","scrubBarValue","value","getAverageAmplitude","startIndex","endIndex","Math","trunc","min","length","sum","i","getPeakAmplitude","peak","max","drawVisualizationBar","index","barWidth","x","verticalCenter","ultimatePeak","adjustedData","pow","barHeight","offsetX","random","offsetY","offsetWidth","frequencyCtx","fillRect","lowFreqShiftingColorNumber","getLowFrequencyColor","lowFrequencySum","lowFrequencyMax","lowFrequencyAverage","map","highFreqShiftingColorNumber","getHighFrequencyColor","highFrequencySum","highFrequencyMax","highFrequencyAverage","start1","stop1","start2","stop2","willReadFrequently","getContext","smudgeCtx","style","width","height","offsetHeight","rotationAngle","rotateSmudge","smudgeVelocity","drawVisualization","requestIdleCallback","getByteFrequencyData","clearRect","canvas","avgAmplitude","highFreqAvgAmplitude","midFreqAvgAmplitude","lowFreqAvgAmplitude","lowFreqPeakAmplitude","gradient","createLinearGradient","highFrequencyColor","addColorStop","fillStyle","zeroAdjust","x2","globalAlpha","abs","drawImage","save","translate","rotate","PI","restore","imageDataTop","getImageData","imageDataBottom","putImageData"],"sources":["/Users/davidmash/Documents/portfolio/src/js/myWorker.js"],"sourcesContent":["let audioCtx, analyser, source, bufferLength, dataArray, canvasAreaRef, scrubBarRef, setLoaded, setPlay, frequencyRef, backgroundRef, audioElement;\n\nonmessage = (e) => {\n    canvasAreaRef = e.data.canvasAreaRef;\n    scrubBarRef = e.data.scrubBarRef;\n    setLoaded = e.data.setLoaded;\n    setPlay = e.data.setPlay;\n    frequencyRef = e.data.frequencyRef;\n    backgroundRef = e.data.backgroundRef;\n\n    if (e.data.file) {\n        audioElement = new Audio();\n        audioElement.src = URL.createObjectURL(e.data.file);\n        audioCtx = new AudioContext();\n        source = audioCtx.createMediaElementSource(new Audio());\n        analyser = audioCtx.createAnalyser();\n        source.connect(analyser);\n        analyser.connect(audioCtx.destination);\n        bufferLength = analyser.frequencyBinCount;\n        dataArray = new Uint8Array(bufferLength);\n        audioElement.addEventListener(\"loadeddata\", () => {\n            if (setLoaded) {\n                setLoaded(true);\n            }\n            initVisualization();\n        });\n    \n        audioElement.addEventListener(\"timeupdate\", () => {\n            if (scrubBarRef && scrubBarRef.current) {\n                let currentTime = audioElement.currentTime;\n                let duration = audioElement.duration;\n                let scrubBarValue = (currentTime / duration) * 100;\n                scrubBarRef.current.value = scrubBarValue;\n            }\n        });\n        audioElement.addEventListener(\"ended\", () => {\n            setPlay(false);\n        });\n    }\n}\n\nfunction initVisualization() {\n    function getAverageAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let sum = 0;\n        for (let i = startIndex; i < endIndex; i++) {\n            sum += data[i];\n        }\n        return sum / (endIndex - startIndex - 1);\n    }\n\n    function getPeakAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let peak = 0;\n        for (let i = startIndex; i < endIndex; i++) {\n            peak = Math.max(peak, data[i]);\n        }\n        return peak;\n    }\n\n    function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n        if (dataArray[index] > ultimatePeak) {\n            ultimatePeak = dataArray[index];\n        }\n        //take the square of the data like this will amplify peaks\n        const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - (index / dataArray.length))) * ((index + (dataArray.length / 2)) / dataArray.length);\n        let barHeight = adjustedData;\n        let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n        frequencyCtx.fillRect(x + offsetX, verticalCenter - (barHeight / 4) + offsetY, barWidth + offsetWidth, barHeight / 2);\n    }\n\n    let lowFreqShiftingColorNumber = 0;\n    function getLowFrequencyColor(dataArray) {\n        let lowFrequencySum = 0;\n        let lowFrequencyMax = 0;\n        for (let i = 0; i < dataArray.length / 2; i++) {\n            lowFrequencySum += dataArray[i];\n            if (dataArray[i] > lowFrequencyMax) {\n                lowFrequencyMax = dataArray[i];\n            }\n        }\n        let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n        if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n            lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + (lowFrequencyMax / (lowFrequencyAverage * 20)) + (lowFrequencyAverage / ultimatePeak)) % 255;\n        }\n        return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%,` + (lowFrequencySum / (lowFrequencyMax + 0.1)) + `)`;\n    }\n\n    let highFreqShiftingColorNumber = 0;\n    function getHighFrequencyColor(dataArray) {\n        let highFrequencySum = 0;\n        let highFrequencyMax = 0;\n        for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n            highFrequencySum += dataArray[i];\n            if (dataArray[i] > highFrequencyMax) {\n                highFrequencyMax = dataArray[i];\n            }\n        }\n        let highFrequencyAverage = highFrequencySum / (dataArray.length/ 2);\n        if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n            highFreqShiftingColorNumber = (highFreqShiftingColorNumber + (highFrequencyMax / (highFrequencyAverage * 200)) + (highFrequencyAverage / ultimatePeak)) % 255;\n        }\n        return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%,` + (highFrequencySum / (highFrequencyMax + 0.1)) + `)`;\n    }\n\n    function map(value, start1, stop1, start2, stop2) {\n        return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n    }\n    \n    frequencyRef.current.willReadFrequently = true;\n    backgroundRef.current.willReadFrequently = true;\n    const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n    const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n    backgroundRef.current.style.width ='100%';\n    backgroundRef.current.style.height='100%';\n    frequencyRef.current.style.width ='100%';\n    frequencyRef.current.style.height='100%';\n    backgroundRef.current.width  = canvasAreaRef.current.offsetWidth;\n    backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n    frequencyRef.current.width  = canvasAreaRef.current.offsetWidth;\n    frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n\n    canvasAreaRef.current.addEventListener(\"resize\", () => {\n        backgroundRef.current.width  = canvasAreaRef.current.offsetWidth;\n        backgroundRef.current.height = canvasAreaRef.current.offsetHeight;\n        frequencyRef.current.width  = canvasAreaRef.current.offsetWidth;\n        frequencyRef.current.height = canvasAreaRef.current.offsetHeight;\n    });\n\n    let ultimatePeak = 1;\n    let rotationAngle = 0;\n    let rotateSmudge = false;\n    let smudgeVelocity = 0;\n    // Draw the frequency spectrum visualization\n    function drawVisualization() {\n        requestIdleCallback(drawVisualization);\n        analyser.getByteFrequencyData(dataArray);\n        \n        // draw current frame to main canvas\n        frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvas.height);\n\n        let avgAmplitude = 0;\n        let highFreqAvgAmplitude = 0;\n        let midFreqAvgAmplitude = 0;\n        let lowFreqAvgAmplitude = 0;\n        let lowFreqPeakAmplitude = 0;\n        if (dataArray && dataArray.length > 0) {\n            let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n            let highFrequencyColor = getHighFrequencyColor(dataArray);\n            gradient.addColorStop(0, highFrequencyColor);\n            gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n            gradient.addColorStop(1, highFrequencyColor);\n            frequencyCtx.fillStyle = gradient;\n            let verticalCenter = frequencyCtx.canvas.height / 2;\n            let zeroAdjust = 0;\n            for (let i = dataArray.length - 1; i >= 0; i--) {\n                if (dataArray[i] - 20 > 0) break;\n                zeroAdjust++;\n            }\n            let barWidth = ((frequencyCtx.canvas.width / dataArray.length)) / 2;\n            let x = 0;\n            let x2 = frequencyCtx.canvas.width;\n            for (let i = 0; i < dataArray.length - zeroAdjust; i++) {\n                drawVisualizationBar(i, barWidth, x, verticalCenter);\n                drawVisualizationBar(i, barWidth, x2, verticalCenter);\n                x += (frequencyCtx.canvas.width / (dataArray.length - zeroAdjust)) / 2;\n                x2 -= (frequencyCtx.canvas.width / (dataArray.length - zeroAdjust)) / 2;\n            }\n            avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n            highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n            midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n            lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n            lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n            frequencyCtx.globalAlpha = (Math.abs(0.2 - (avgAmplitude / 200)) + 0.1) / 2;\n        }\n\n        //smudge effect\n        rotateSmudge = (rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8) || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n        if (rotateSmudge) {\n            smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n            rotationAngle = (rotationAngle + 1) % 360;\n            smudgeVelocity = (lowFreqAvgAmplitude) / 5 * (midFreqAvgAmplitude < highFreqAvgAmplitude * 2)? -1: 1;\n            // Save the current canvas state\n            smudgeCtx.save();\n            // Rotate the canvas\n            smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n            smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n            smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n            // Draw the smudged image on the canvas\n            smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n            // Restore the canvas state\n            smudgeCtx.restore();\n            smudgeCtx.globalAlpha = Math.abs(0.04 - (avgAmplitude / 4000));\n        } else {\n            rotationAngle = 0;\n            var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n            var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n            smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n            smudgeCtx.globalAlpha = 0.5 - (avgAmplitude / 100);\n            smudgeVelocity = (avgAmplitude < 10)? avgAmplitude * 2: ((lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.5 > midFreqAvgAmplitude + highFreqAvgAmplitude)? -1: 1) * avgAmplitude / 4;\n            smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n            smudgeCtx.putImageData(imageDataBottom, 0, (smudgeCtx.canvas.height / 2) + smudgeVelocity);\n            smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n        }\n    }\n\n    drawVisualization();\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}